<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <!-- 网页标题 -->
    <title>{{ map.project.name }} - {{ map.name }}/{{ map.floor }}</title>
    <!-- 引入本地 Bootstrap CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/bootstrap.min.css') }}">
    <!-- 引入本地自定义 CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <!-- CSRF 令牌 -->
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <style>
        /* 样式用于表格 */
        .mark-summary table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 5px;
            table-layout: auto; /* 自适应表格布局 */
            white-space: nowrap; /* 防止文字换行 */
            font-size: 14px; /* 基础字体大小 */
        }

        .mark-summary th,
        .mark-summary td {
            padding: 3px;
            border: 1px solid #ddd;
            text-align: center;
            vertical-align: middle;
            line-height: 1.4; /* 调整行高 */
        }

        .mark-summary th[rowspan] {
            /* 固定第一列的样式 */
            background-color: #f8f9fa;
            font-weight: bold;
        }

        .mark-summary td:first-child {
            /* 固定第一列单元格的样式 */
            background-color: #f8f9fa;
            font-weight: bold;
        }

        .mark-summary .color-circle {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            border: 1px solid #000;
        }

        .mark-summary .color-rectangle {
            width: 20px;
            height: 15px;
            display: inline-block;
            margin-right: 5px;
            border: 1px solid #000;
            border-radius: 4px;
            text-align: center;
            line-height: 15px;
            font-size: 10px;
            color: inherit; /* 文字颜色通过内联样式设置 */
        }

        /* 其他自定义样式 */
        .mark {
            position: absolute;
            z-index: 1; /* 设置较低的 z-index */
            cursor: pointer;
            border: 1px solid #000; /* 默认边框颜色 */
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: inherit; /* 文字颜色通过内联样式设置 */
            box-sizing: border-box; /* 包括边框和内边距在内 */
            white-space: nowrap; /* 防止文本换行 */
            overflow: hidden; /* 防止文本溢出 */
        }

        /* AP标记样式：保持圆形 */
        .mark:not(.weak-electric-mark) {
            border-radius: 50%;
        }

        /* 弱电井标记样式：竖向长方形，空心 */
        .weak-electric-mark {
            background-color: transparent; /* 透明背景 */
            border: 1px solid;
            border-radius: 2px; /* 圆角，可根据需要调整 */
            display: flex; /* 使文本居中 */
            align-items: center; /* 垂直居中 */
            justify-content: center; /* 水平居中 */
            -webkit-text-stroke: 0.2px black;
        }

        .label {
            position: absolute;
            border: 1px solid;
            background-color: rgba(255, 255, 255, 0.6);
            padding: 1px 1px;
            border-radius: 2px;
            display: inline-block;
            pointer-events: none;
            white-space: nowrap; /* 防止文本换行 */
            overflow: hidden; /* 防止文本溢出 */
            font-size: 14px; /* 基础字体大小 */
            transform: translate(-50%, 40%); /* 水平居中，垂直向上偏移 */
            -webkit-text-stroke: 0.2px black;
        }

        /* 绑定标签的样式 */
        .binding-label {
            position: absolute;
            transform: translate(-50%, -100%); /* 水平居中，垂直向上偏移 */
            z-index: 2; /* 确保在 AP 标记之上 */
            background-color: rgba(255, 255, 255, 0.5);
            border: 1px solid; /* 边框 */
            border-radius: 2px; /* 圆角 */
            padding: 1px 1px; /* 内边距 */
            display: inline-block;
            white-space: nowrap; /* 防止换行 */
            box-sizing: border-box;
            font-weight: bold;
            /* 首先尝试使用 -webkit-text-stroke */
            -webkit-text-stroke: 0.2px black;
            /* 使用 text-shadow 作为后备方案 */
        }

        #main-title {
            font-size: 27px;
            margin-bottom: 10px;
            font-weight: bold;
        }

        /* 署名表单的样式 */
        #signatureFormContainer {
            margin-top: 5px;
        }
        #signatureFormContainer table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 3px;
        }
        #signatureFormContainer td {
            border: 1px solid #ddd;
            padding: 5px;
            line-height: 1.2; /* 调整行高 */
        }
        #signatureFormContainer input {
            width: 100%;
            box-sizing: border-box;
        }

        /* 使用padding-bottom保持长宽比 */
        #map-container {
            margin-top: 3px;
            position: relative;
            width: 100%;
            height: auto; /* 高度由JavaScript动态设置 */
            overflow: hidden;
        }

        #panzoom {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        #panzoom img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            display: block;
        }

        /* 拖动时的样式 */
        .dragging {
            opacity: 0.6;
        }

        /* 加载动画样式 */
        #mapLoadingOverlay {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7); /* 半透明背景，可根据需要调整 */
            z-index: 10; /* 确保在标记之上 */
        }

        /* 确保加载动画在标记之上 */
        #mapLoadingOverlay .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        /* 自适应字体大小 */
        @media (max-width: 768px) {
            .mark-summary table {
                font-size: 12px;
            }
            .label {
                font-size: 12px;
            }
        }

        @media (max-width: 576px) {
            .mark-summary table {
                font-size: 10px;
            }
            .label {
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- 页面主标题 -->
        <h1 id="main-title">{{ map.project.name }} - {{ map.name }}/{{ map.floor }}</h1>
        <!-- 返回项目详情按钮、AP点位规格下拉菜单及还原视角和导出PDF按钮 -->
        <div class="d-flex align-items-center mb-3">
            <a href="{{ url_for('main.project_detail', project_id=map.project.id) }}" class="btn btn-secondary">返回项目详情</a>

            <!-- AP点位规格下拉菜单 -->
            <div class="dropdown ml-3">
                <button class="btn btn-primary dropdown-toggle" type="button" id="apSizeDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    AP点位规格：中
                </button>
                <div class="dropdown-menu" aria-labelledby="apSizeDropdown">
                    <a class="dropdown-item" href="#" data-size="large">大</a>
                    <a class="dropdown-item" href="#" data-size="medium">中</a>
                    <a class="dropdown-item" href="#" data-size="small">小</a>
                </div>
            </div>
            
            <!-- 添加“配置快捷添加”按钮 -->
            <button class="btn btn-primary ml-3" id="configureQuickAddButton">配置快捷添加</button>
            <!-- 添加“加载/关闭AP绑定”按钮 -->
            <button class="btn btn-primary ml-3" id="toggleApBindingButton">加载AP绑定</button>

            <!-- 右侧按钮组 -->
            <div class="ml-auto d-flex align-items-center">
			    <button class="btn btn-warning" id="undoButton" disabled>撤销操作</button>
                <button class="btn btn-info mr-2" id="restoreViewButton">还原视角</button>
                <button class="btn btn-success" id="exportPdfButton">导出PDF</button>
				<button class="btn btn-primary" id="cachePdfButton">缓存PDF</button>
            </div>
        </div>

        <!-- 实时汇总表单 -->
        <div id="mark-summary" class="mark-summary">
            <table id="mark-summary-table">
                <thead>
                    <tr>
                        <th rowspan="3" style="vertical-align: middle;"></th>
                        <th colspan="7">颜色统计</th> <!-- 假设最多有7种颜色，动态调整 -->
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>图示</td>
                        <!-- 动态生成的颜色图示列 -->
                    </tr>
                    <tr>
                        <td>说明</td>
                        <!-- 动态生成的说明列 -->
                    </tr>
                    <tr>
                        <td>数量</td>
                        <!-- 动态生成的数量列 -->
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="map-container">
            <!-- 加载动画 -->
            <div id="mapLoadingOverlay">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">加载中...</span>
                </div>
            </div>
            
            <div id="panzoom">
                <img id="map-image" src="{{ url_for('static', filename='images/' + map.project.name + '/' + map.image_filename) }}" alt="{{ map.name }}" />
                {% for mark in marks %}
                    {% if mark.type == 'WeakElectric' %}
                        <div 
                            class="mark weak-electric-mark" 
                            id="mark-{{ mark.id }}"
                            style="top: {{ mark.y }}%; left: {{ mark.x }}%; border-color: {{ mark.color }}; color: {{ mark.color }};"
                            data-mark-id="{{ mark.id }}"
                            data-x="{{ mark.x }}"
                            data-y="{{ mark.y }}"
                            data-type="{{ mark.type }}"
                            data-has-bindings="{{ 'true' if mark.bound_aps else 'false' }}"
                            title="{{ mark.label }}"
                            draggable="false"
                        >
                            IDF
                        </div>
                        {% if mark.label %}
                            <div class="label" style="top: calc({{ mark.y }}% + 1px); left: {{ mark.x }}%;" data-mark-id="{{ mark.id }}">
                                {{ mark.label }}
                            </div>
                        {% endif %}
                    {% else %}
                        <div 
                            class="mark" 
                            id="mark-{{ mark.id }}"
                            style="top: {{ mark.y }}%; left: {{ mark.x }}%; background-color: {{ mark.color }};"
                            data-mark-id="{{ mark.id }}"
                            data-x="{{ mark.x }}"
                            data-y="{{ mark.y }}"
                            data-type="{{ mark.type }}"
                            data-weak-electric-id="{{ mark.weak_electric_id if mark.is_ap() else '' }}"
                            title="{{ mark.label }}{% if mark.weak_electric_id %} (绑定到 WeakElectric ID: {{ mark.weak_electric_id }}){% endif %}"
                            draggable="false"
                        ></div>
                        {% if mark.label %}
                            <div class="label" style="top: calc({{ mark.y }}% + 1px); left: {{ mark.x }}%;" data-mark-id="{{ mark.id }}">
                                {{ mark.label }}
                            </div>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </div>
        </div>
    <p class="mt-3" style="color: blue;">
	    操作说明：<br>
        左键点击空白区域添加标记；点击标记可编辑或删除；按住Ctrl键(Mac系统为Command键)+左键点击标记抓取，移动鼠标指定位置单击放下。<br>
        滚轮缩放图纸大小；右键拖动图纸平移；按住shift左键点击执行快捷添加和删除；按住shift右键点击执行快捷编辑；<br>
		执行撤销可以回退一步操作（最大记录50次），可以对误操作进行回退，快捷键Ctrl(Mac系统为Command键)+Z。<br>
		移动端说明：<br>
        在移动端中（手机、平板）如果配置了快捷添加，点击图纸执行快捷添加；在快捷添加中清空配置恢复为普通添加。<br>
		移动端中长按AP或弱电井实现抓取操作，在新的地方点击放下；移动端中暂不支持快速删除功能。
    </p>
    <!-- 添加“使用/取消署名”按钮 -->
    <div id="signature-buttons" class="mb-3">
        {% if signature_info.drawer_name and signature_info.drawing_time %}
            <!-- 存在署名信息时显示“取消署名”和“保存署名”按钮 -->
            <button id="cancelSignatureButton" class="btn btn-secondary">取消署名</button>
            <button id="saveSignatureButton" class="btn btn-success">保存署名</button>
        {% else %}
            <!-- 不存在署名信息时显示“使用署名”按钮 -->
            <button id="useSignatureButton" class="btn btn-primary">使用署名</button>
        {% endif %}
    </div>
    <!-- 署名表单容器 -->
    <div id="signatureFormContainer" class="mark-summary" 
         {% if signature_info.drawer_name and signature_info.drawing_time %}
             style="display: block; margin-bottom: 10px;"
         {% else %}
             style="display: none; margin-bottom: 10px;"
         {% endif %}>
        <table id="signatureTable" border="1" cellpadding="5" style="width: 100%; border-collapse: collapse;">
            <tr>
                <td style="width: 15%;">绘制人：</td>
                <td style="width: 35%;">
                    <input type="text" id="drawerName" class="form-control" placeholder="请输入绘制人"
                           value="{{ signature_info.drawer_name or '' }}" required>
                </td>
                <td style="width: 15%;">绘制时间：</td>
                <td style="width: 35%;">
                    <input type="text" id="drawingTime" class="form-control" readonly
                           value="{{ signature_info.drawing_time or '' }}">
                </td>
            </tr>
        </table>
    </div>
    </div>

    <!-- 引入本地 jQuery -->
    <script src="{{ url_for('static', filename='js/jquery.min.js') }}"></script>
    <!-- 引入本地 Popper.js -->
    <script src="{{ url_for('static', filename='js/popper.min.js') }}"></script>
    <!-- 引入本地 Bootstrap JS -->
    <script src="{{ url_for('static', filename='js/bootstrap.min.js') }}"></script>
    <!-- 引入本地 Panzoom JS -->
    <script src="{{ url_for('static', filename='js/panzoom.min.js') }}"></script>
    <!-- 引入本地 jsPDF 和 html2canvas -->
    <script src="{{ url_for('static', filename='js/jspdf.umd.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/html2canvas.min.js') }}"></script>

    <!-- 自定义脚本 -->
    <script>

    document.addEventListener('DOMContentLoaded', () => {
        const panzoomElement = document.getElementById('panzoom');
        const mapImage = document.getElementById('map-image');
        const mapContainer = document.getElementById('map-container');
        const mapLoadingOverlay = document.getElementById('mapLoadingOverlay'); // 获取加载动画元素
        const toggleSignatureButton = document.getElementById('toggleSignatureButton');
        const signatureFormContainer = document.getElementById('signatureFormContainer');
        const drawingTimeInput = document.getElementById('drawingTime');
        const drawerNameInput = document.getElementById('drawerName');
        // 获取署名相关元素
        const useSignatureButton = document.getElementById('useSignatureButton');
        const saveSignatureButton = document.getElementById('saveSignatureButton');
        const cancelSignatureButton = document.getElementById('cancelSignatureButton');
        // 获取CSRF Token
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        // 获取“快速标签”复选框和标签输入框
        const quickAddAutoLabelCheckbox = document.getElementById('quickAdd_auto_label');
        const quickAddMarkLabelInput = document.getElementById('quickAdd_mark_label');
		// 定义动作栈
		const actionStack = [];
		// 定义最大栈深度（可选）
		const MAX_STACK_SIZE = 50;
		
        let panzoomInstance;
        let grabbedMark = null;
        let quickAddConfig = null; // 快速添加初始化
        let apBindingLabelsVisible = false; // 用于跟踪标签显示状态
        let weakElectricMarksData = {}; // 存储弱电井标记的数据
        let signatureEnabled = false;
        let lastSelectedColor = null;
        let lastEnteredLabel = '';
        loadWeakElectricData();
		// 系统检测
		function isSafari() {
            const ua = navigator.userAgent.toLowerCase();
            return ua.includes('safari') && !ua.includes('chrome') && !ua.includes('android');
	    }
        function updateBindingLabelForMark(mark) {
            const markId = mark.dataset.markId;
            const weakElectricId = mark.getAttribute('data-weak-electric-id');
            // 移除已有的绑定标签
            const existingLabel = document.querySelector(`.binding-label[data-mark-id="${markId}"]`);
            if (existingLabel) {
                existingLabel.remove();
            }
            if (weakElectricId && apBindingLabelsVisible) {
                const weMark = weakElectricMarksData[weakElectricId];
                if (weMark) {
                    // 创建绑定标签
                    const bindingLabel = document.createElement('div');
                    bindingLabel.classList.add('label', 'binding-label');
                    bindingLabel.style.color = weMark.color;
                    bindingLabel.style.borderColor = weMark.color;
                    bindingLabel.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
                    bindingLabel.textContent = weMark.map_floor; // 显示弱电井所在楼层
                    bindingLabel.setAttribute('data-mark-id', markId);
                    // 设置 bindingLabel 的位置，与 mark 一致
                    bindingLabel.style.left = mark.style.left;
                    bindingLabel.style.top = mark.style.top;

                    // **设置字体大小**
                    const currentSize = getCurrentSize();
                    const settings = sizeSettings[currentSize];
                    bindingLabel.style.fontSize = settings.labelFontSize;

                    panzoomElement.appendChild(bindingLabel);
                }
            }
        }

        function loadApBindingLabels() {
            // 确保弱电井数据已加载
            if (Object.keys(weakElectricMarksData).length === 0) {
                loadWeakElectricData(loadApBindingLabels);
                return;
            }

            const apMarks = document.querySelectorAll('.mark:not(.weak-electric-mark)');
            apMarks.forEach(mark => {
                updateBindingLabelForMark(mark);
            });
        }

        function removeApBindingLabels() {
            const bindingLabels = document.querySelectorAll('.binding-label');
            bindingLabels.forEach(label => {
                label.remove();
            });
        }

        function loadWeakElectricData(callback) {
            fetch(`/api/get_all_weak_electric_marks/{{ project.id }}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    weakElectricMarksData = {};
                    data.weak_electric_marks.forEach(weMark => {
                        weakElectricMarksData[weMark.id] = weMark;
                    });
                    if (callback) {
                        callback();
                    }
                } else {
                    console.error('Failed to load WeakElectric marks:', data.message);
                    alert('加载弱电井标记失败。');
                }
            })
            .catch(err => {
                console.error('Fetch Error:', err);
                alert('加载弱电井标记失败。');
            });
        }
		
/**
 * 将一个动作推入动作栈
 * @param {object} action - 动作对象
 */
const pushAction = (action) => {
    if (actionStack.length >= MAX_STACK_SIZE) {
        actionStack.shift(); // 移除最旧的动作
    }
    actionStack.push(action);
    updateUndoButtonState();
};

/**
 * 弹出一个动作并执行撤销
 */
const undoLastAction = () => {
    if (actionStack.length === 0) return;

    const lastAction = actionStack.pop();
    executeUndo(lastAction);
    updateUndoButtonState();
};

/**
 * 更新“撤销”按钮的启用状态
 */
const updateUndoButtonState = () => {
    const undoButton = document.getElementById('undoButton');
    if (actionStack.length > 0) {
        undoButton.disabled = false;
    } else {
        undoButton.disabled = true;
    }
};

/**
 * 执行撤销操作
 * @param {object} action - 动作对象
 */
const executeUndo = (action) => {
    switch(action.type) {
        case 'add':
            // 撤销添加标记，即删除标记
            deleteMarkWithoutRecording(action.mark.id);
            break;
        case 'edit':
            // 撤销编辑标记，即恢复到之前的状态
            restoreMarkState(action.markId, action.previousState);
            break;
        case 'delete':
            // 撤销删除标记，即重新添加标记
            restoreDeletedMark(action.mark);
            break;
        case 'move':
            // 撤销移动标记，即恢复到之前的位置
            moveMarkToPosition(action.markId, action.previousPosition);
            break;
        default:
            console.error('Unknown action type:', action.type);
    }
};

/**
 * 删除标记而不记录动作（用于撤销操作中的回退）
 * @param {number} markId - 标记ID
 */
const deleteMarkWithoutRecording = (markId) => {
    // 使用已有的 deleteMark 函数，但不记录动作
    fetch(`/api/delete_mark/${markId}?force=true`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Delete Mark Without Recording Response:', data);
        if (data.status === 'success') {
            const markElement = document.getElementById(`mark-${markId}`);
            if (markElement) {
                const labelElement = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
                let color;
                let markType;
                if (markElement.classList.contains('weak-electric-mark')) {
                    color = markElement.style.borderColor.toLowerCase();
                    markType = 'WeakElectric';
                } else {
                    color = markElement.style.backgroundColor.toLowerCase();
                    markType = 'AP';
                }

                markElement.remove();
                if (labelElement) {
                    labelElement.remove();
                }
                const bindingLabel = document.querySelector(`.binding-label[data-mark-id="${markId}"]`);
                if (bindingLabel) {
                    bindingLabel.remove();
                }

                if (!markElement.classList.contains('weak-electric-mark')) {
                    if (color) {
                        updateMarkCount(color, -1);
                    }
                }

                if (markElement.classList.contains('weak-electric-mark')) {
                    const index = weakElectricUsedColors.indexOf(color);
                    if (index > -1) {
                        weakElectricUsedColors.splice(index, 1);
                    }
                    // 对于WeakElectric标记，直接重新渲染汇总
                    renderMarkSummary();
                    loadWeakElectricData(() => {
                        if (apBindingLabelsVisible) {
                            removeApBindingLabels();
                            loadApBindingLabels();
                        }
                    });
                }

                console.log(`Mark ${markId} deleted without recording.`);
            }
        } else {
            console.error('Delete mark without recording failed:', data.message);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
    });
};

/**
 * 恢复标记的之前状态（撤销编辑）
 * @param {number} markId - 标记ID
 * @param {object} previousState - 之前的状态对象
 */
const restoreMarkState = (markId, previousState) => {
    fetch(`/edit_mark/${markId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ 
            label: previousState.label, 
            color: previousState.color, 
            weak_electric_id: previousState.weak_electric_id 
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Restore Mark State Response:', data);
        if (data.status === 'success') {
            const markElement = document.getElementById(`mark-${markId}`);
            if (markElement) {
                if (markElement.classList.contains('weak-electric-mark')) {
                    markElement.style.borderColor = previousState.color;
                    markElement.style.color = previousState.color;
                } else {
                    markElement.style.backgroundColor = previousState.color;
                }

                markElement.setAttribute('data-weak-electric-id', previousState.weak_electric_id || '');

                const currentSize = getCurrentSize();
                const settings = sizeSettings[currentSize];

                const labelDiv = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
                if (labelDiv) {
                    labelDiv.textContent = previousState.label.trim(); // 使用 trim() 去除空格
                    labelDiv.style.fontSize = settings.labelFontSize;
                } else if (previousState.label) {
                    const newLabelDiv = document.createElement('div');
                    newLabelDiv.classList.add('label');
                    newLabelDiv.style.top = `calc(${markElement.style.top} + 1px)`;
                    newLabelDiv.style.left = markElement.style.left;
                    newLabelDiv.style.fontSize = settings.labelFontSize;
                    newLabelDiv.textContent = previousState.label.trim(); // 使用 trim() 去除空格
                    newLabelDiv.setAttribute('data-mark-id', markId); // 添加关联属性
                    panzoomElement.appendChild(newLabelDiv);
                }

                if (!markElement.classList.contains('weak-electric-mark')) {
                    // 更新统计计数
                    const currentColor = previousState.color.toLowerCase();
                    updateMarkCountWithoutRenderMarkSummary(previousState.color.toLowerCase(), 1);
                }

                // 重新渲染统计表
                renderMarkSummary();

                // 如果是 WeakElectric，重新加载绑定关系
                if (markElement.classList.contains('weak-electric-mark')) {
                    loadWeakElectricData(() => {
                        if (apBindingLabelsVisible) {
                            removeApBindingLabels();
                            loadApBindingLabels();
                        }
                    });
                } else {
				    // 对于AP，更新绑定标签
					loadApBindingLabels();
				}	

                console.log(`Mark ${markId} state restored successfully.`);
            }
        } else {
            console.error('Restore mark state failed:', data.message);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
    });
};

/**
 * 恢复被删除的标记（撤销删除）
 * @param {object} mark - 被删除的标记对象
 */
const restoreDeletedMark = (mark) => {
    fetch(`/add_mark/{{ map.id }}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ 
            x: mark.x, 
            y: mark.y, 
            color: mark.color, 
            label: mark.label.trim(), // 使用 trim() 去除空格
            type: mark.type, 
            weak_electric_id: mark.weak_electric_id !== null ? mark.weak_electric_id : null  
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Restore Deleted Mark Response:', data);
        if (data.status === 'success' && data.mark && data.mark.id) {
            const restoredMark = createMarkElement(data.mark);
            panzoomElement.appendChild(restoredMark);
            bindMarkEvents(restoredMark);
            
            if (apBindingLabelsVisible) {
                updateBindingLabelForMark(restoredMark);
            }

            if (data.mark.type !== 'WeakElectric') {
                updateMarkCount(data.mark.color.toLowerCase(), 1);
            }

            if (data.mark.type === 'WeakElectric') {
                renderMarkSummary();
                loadWeakElectricData(() => {
                    if (apBindingLabelsVisible) {
                        removeApBindingLabels();
                        loadApBindingLabels();
                    }
                });
            } else {
			    // 对于AP，更新绑定标签
				loadApBindingLabels();
			}

            console.log(`Mark ${data.mark.id} restored successfully.`);
        } else {
            console.error('Restore deleted mark failed:', data.message);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
    });
};

/**
 * 将标记移动到指定位置（撤销移动）
 * @param {number} markId - 标记ID
 * @param {object} position - 位置对象 { x, y }
 */
const moveMarkToPosition = (markId, position) => {
    fetch(`/api/update_mark_position/${markId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ x: position.x, y: position.y })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Move Mark To Position Response:', data);
        if (data.status === 'success') {
            const markElement = document.getElementById(`mark-${markId}`);
            if (markElement) {
                markElement.style.left = `${position.x}%`;
                markElement.style.top = `${position.y}%`;

                const label = document.querySelector(`.label[data-mark-id="${markId}"]`);
                if (label) {
                    label.style.left = `${position.x}%`;
                    label.style.top = `calc(${position.y}% + 1px)`;
                }

                const bindingLabel = document.querySelector(`.binding-label[data-mark-id="${markId}"]`);
                if (bindingLabel) {
                    bindingLabel.style.left = markElement.style.left;
                    bindingLabel.style.top = markElement.style.top;
                }

                console.log(`Mark ${markId} moved to x: ${position.x}, y: ${position.y} successfully.`);
            }
        } else {
            console.error('Move mark to position failed:', data.message);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
    });
};

document.addEventListener('keydown', (e) => {
    // 检测是否按下了 Ctrl + Z 或 Command + Z
    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    const modifierKey = isMac ? e.metaKey : e.ctrlKey;

    if (modifierKey && e.key.toLowerCase() === 'z' && !e.shiftKey && !e.altKey) {
        const target = e.target;
        const isInput = target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;

        if (!isInput) {
            e.preventDefault(); // 阻止默认的浏览器撤销行为
            undoLastAction();
        }
        // 如果在输入框或可编辑内容中，允许浏览器执行默认的撤销操作
    }
});	

const cachePdfOnClient = (pdfBlob, fileName) => {
    // 确保 projectId、mapId、mapName、mapFloor 已定义
    if (!projectId || !mapId || !mapName || !mapFloor) {
        console.error('项目或图纸信息未定义:', { projectId, mapId, mapName, mapFloor });
        alert('缓存 PDF 时发生错误：项目或图纸信息缺失。');
        return;
    }

    // 确保 pdfBlob 是一个 Blob 对象
    if (!(pdfBlob instanceof Blob)) {
        console.error('pdfBlob 不是一个 Blob 对象:', pdfBlob);
        alert('缓存 PDF 时发生错误：PDF 数据无效。');
        return;
    }

    const data = {
        id: `${projectId}_${mapId}`, // 唯一标识符
        projectId: projectId,
        projectName: projectName,
        mapId: mapId,
        mapName: mapName,
        mapFloor: mapFloor,
        pdfBlob: pdfBlob
    };

    savePdfToIndexedDB(data).then(() => {
        alert('PDF 已成功缓存到浏览器，如果清除缓存则会清空该记录');
    }).catch(error => {
        console.error('Error saving PDF to IndexedDB:', error);
        alert('缓存 PDF 时发生错误。');
    });
};

function savePdfToIndexedDB(data) {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('pdfCacheDB', 2); // 统一使用版本 2
        request.onupgradeneeded = function(event) {
            const db = event.target.result;
            console.log('IndexedDB 升级到版本', db.version);

            let store;
            if (!db.objectStoreNames.contains('pdfFiles')) {
                console.log('创建对象存储: pdfFiles');
                store = db.createObjectStore('pdfFiles', { keyPath: 'id' });
            } else {
                console.log('对象存储 pdfFiles 已存在');
                store = request.transaction.objectStore('pdfFiles');
            }

            if (!store.indexNames.contains('projectIdIndex')) {
                console.log('创建索引: projectIdIndex');
                store.createIndex('projectIdIndex', 'projectId', { unique: false });
            } else {
                console.log('索引 projectIdIndex 已存在');
            }
        };
        request.onsuccess = function(event) {
            const db = event.target.result;
            const transaction = db.transaction(['pdfFiles'], 'readwrite');
            const store = transaction.objectStore('pdfFiles');
            const putRequest = store.put(data);
            putRequest.onsuccess = function() {
                console.log('PDF 成功存储到 IndexedDB:', data.id);
                resolve();
            };
            putRequest.onerror = function(event) {
                console.error('存储 PDF 时发生错误:', event.target.error);
                reject(event.target.error);
            };
        };
        request.onerror = function(event) {
            console.error('打开 IndexedDB 时发生错误:', event.target.error);
            reject(event.target.error);
        };
    });
}



        // 绑定“快速标签”复选框的change事件
        quickAddAutoLabelCheckbox.addEventListener('change', function() {
            if (this.checked) {
                // 清空并禁用标签输入框
                quickAddMarkLabelInput.value = '';
                quickAddMarkLabelInput.disabled = true;
            } else {
                // 启用标签输入框
                quickAddMarkLabelInput.disabled = false;
            }
        });

        // 定义函数格式化当前时间
        const getFormattedCurrentTime = () => {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            return `${year}年${month}月${day}日 ${hours}时：${minutes}分：${seconds}秒`;
        };

        const signatureButtonsDiv = document.getElementById('signature-buttons');
        if (signatureButtonsDiv) {
            signatureButtonsDiv.addEventListener('click', (event) => {
                const target = event.target;
                const targetId = target.id;

                if (targetId === 'useSignatureButton') {
                    // 处理“使用署名”按钮点击
                    signatureFormContainer.style.display = 'block';
                    // 设置signatureEnabled为true
                    signatureEnabled = true;

                    // 替换按钮为“取消署名”和“保存署名”
                    signatureButtonsDiv.innerHTML = `
                        <button id="cancelSignatureButton" class="btn btn-secondary">取消署名</button>
                        <button id="saveSignatureButton" class="btn btn-success">保存署名</button>
                    `;

                    // 设置绘制时间
                    drawingTimeInput.value = getFormattedCurrentTime();

                } else if (targetId === 'saveSignatureButton') {
                    // 处理“保存署名”按钮点击
                    const drawerName = drawerNameInput.value.trim();
                    if (!drawerName) {
                        alert('绘制人不能为空。');
                        return;
                    }

                    // 准备数据
                    const data = { drawer_name: drawerName };

                    // 发送保存署名的POST请求
                    fetch(`/api/save_signature/{{ map.id }}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': csrfToken
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            // 更新绘制时间显示
                            drawingTimeInput.value = data.drawing_time;

                            alert('署名已保存。');

                            // 重新加载页面以显示最新的署名信息
                            location.reload();
                        } else {
                            alert('保存署名失败: ' + data.message);
                        }
                    })
                    .catch(err => {
                        console.error('Fetch Error:', err);
                        alert('保存署名时发生错误。');
                    });

                } else if (targetId === 'cancelSignatureButton') {
                    // 处理“取消署名”按钮点击
                    // **优化：移除确认弹窗，直接清除署名信息**

                    // 清空表单
                    drawerNameInput.value = '';
                    drawingTimeInput.value = '';

                    // 隐藏表单
                    signatureFormContainer.style.display = 'none';
                    // 设置signatureEnabled为false
                    signatureEnabled = false;

                    // 替换按钮为“使用署名”
                    signatureButtonsDiv.innerHTML = `
                        <button id="useSignatureButton" class="btn btn-primary">使用署名</button>
                    `;
                }
            });
        }

        /**
         * 填充图纸名/楼层下拉菜单
         * @param {HTMLElement} selectElement - 第一个下拉菜单元素
         */
        const populateMapFloorSelect = (selectElement) => {
            selectElement.innerHTML = ''; // 移除之前的选项

            const grouped = {};

            Object.values(weakElectricMarksData).forEach(weMark => {
                const key = `${weMark.map_floor}`;
                if (!grouped[key]) grouped[key] = [];
                grouped[key].push(weMark);
            });

            Object.keys(grouped).sort().forEach(key => {
                const option = document.createElement('option');
                option.value = key; // 格式为 "MapName/Floor"
                option.textContent = key;
                selectElement.appendChild(option);
            });

            // 确保当前图纸/楼层存在于下拉菜单中
            const currentMapFloorKey = `${mapFloor}`;
            if (!grouped.hasOwnProperty(currentMapFloorKey)) {
                const option = document.createElement('option');
                option.value = currentMapFloorKey;
                option.textContent = currentMapFloorKey;
                selectElement.appendChild(option);
            }
        };

        /**
         * 填充弱电井下拉菜单
         * @param {HTMLElement} selectElement - 第二个下拉菜单元素
         * @param {string} mapFloorKey - 选中的图纸名/楼层键值
         */
        const populateWeakElectricSelect = (selectElement, mapFloorKey) => {
            if (!mapFloorKey) {
                selectElement.innerHTML = '<option value="">不绑定</option>';
                selectElement.disabled = true;
                return;
            }

            const weakElectricMarks = Object.values(weakElectricMarksData).filter(weMark => weMark.map_floor === mapFloorKey);

            if (weakElectricMarks.length === 0) {
                selectElement.innerHTML = '<option value="">不绑定</option>';
            } else {
                selectElement.innerHTML = '<option value="">不绑定</option>';
                weakElectricMarks.forEach(weMark => {
                    const option = document.createElement('option');
                    option.value = weMark.id;
                    option.textContent = `${colorLabelMap[weMark.color]} <${weak_electric_definitions[weMark.color]}>`;
                    selectElement.appendChild(option);
                });
            }

            // 启用弱电井选择下拉菜单
            selectElement.disabled = false;
        };

        // **新增代码：根据签名表单的初始显示状态设置signatureEnabled**
        const isSignatureVisible = window.getComputedStyle(signatureFormContainer).display !== 'none';
        if (isSignatureVisible) {
            signatureEnabled = true;
        }

        // 引入地图名称和楼层到JavaScript
        const projectName = "{{ map.project.name }}";
        const projectId = "{{ map.project.id }}";
        const mapFloor = "{{ map.floor }}";
        const mapName = "{{ map.name }}"; // 添加地图名称
        const mapId = {{ map.id }};

        const sizeSettings = {
            large: {
                ap: { width: '16px', height: '16px' },
                weakElectric: { width: '20px', height: '30px' },
                labelFontSize: '12px'
            },
            medium: {
                ap: { width: '12px', height: '12px' },
                weakElectric: { width: '18px', height: '26px' },
                labelFontSize: '9px'
            },
            small: {
                ap: { width: '9px', height: '9px' },
                weakElectric: { width: '14px', height: '22px' },
                labelFontSize: '5px'
            }
        };

        const apSizeDropdown = document.getElementById('apSizeDropdown');
        const dropdownItems = document.querySelectorAll('.dropdown-item');

        const apDefinitions = {{ ap_definitions | tojson | safe }};
        const weak_electric_definitions = {{ weak_electric_definitions | tojson | safe }};

        const colorLabelMap = {
            'red': '红色',
            'blue': '蓝色',
            'green': '绿色',
            'yellow': '黄色',
            'purple': '紫色',
            'orange': '橙色',
            'black': '黑色'
        };

        const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'black'];

        const markCounts = {{ mark_counts | tojson | safe }};

        const weakElectricUsedColors = {{ weak_electric_used_colors | tojson | safe }};

        /**
         * 获取当前尺寸设置
         * @returns {string} - 'large' | 'medium' | 'small'
         */
        const getCurrentSize = () => {
            const sizeText = apSizeDropdown.textContent;
            if (sizeText.includes('大')) return 'large';
            if (sizeText.includes('小')) return 'small';
            return 'medium';
        };

        /**
         * 计算缩放后的宽度和高度，保持原始长宽比
         * @param {number} originalWidth - 原始宽度（mm）
         * @param {number} originalHeight - 原始高度（mm）
         * @param {number} maxWidth - 最大宽度（mm）
         * @param {number} maxHeight - 最大高度（mm）
         * @returns {object} - 缩放后的宽度和高度
         */
        const getScaledDimensions = (originalWidth, originalHeight, maxWidth, maxHeight) => {
            const widthRatio = maxWidth / originalWidth;
            const heightRatio = maxHeight / originalHeight;
            const scale = Math.min(widthRatio, heightRatio);
            return {
                width: originalWidth * scale,
                height: originalHeight * scale
            };
        };

        /**
         * 创建标记元素
         * @param {object} markData - 标记数据
         * @returns {HTMLElement} - 标记元素
         */
        const createMarkElement = (markData) => {
            const { id, x, y, color, type, label, weak_electric_id } = markData;
            const mark = document.createElement('div');
            mark.classList.add('mark');
            mark.id = `mark-${id}`;
            mark.style.top = `${y}%`;
            mark.style.left = `${x}%`;
            mark.setAttribute('data-mark-id', id);
            mark.setAttribute('data-x', x);
            mark.setAttribute('data-y', y);
            mark.setAttribute('data-type', type);
            mark.setAttribute('data-weak-electric-id', weak_electric_id || '');
            mark.setAttribute('draggable', 'false');
            mark.setAttribute('title', `${label}${weak_electric_id ? ` (绑定到 WeakElectric ID: ${weak_electric_id})` : ''}`);

            if (type === 'WeakElectric') {
                mark.classList.add('weak-electric-mark');
                mark.style.borderColor = color;
                mark.style.color = color;
                mark.textContent = 'IDF';
                mark.setAttribute('data-has-bindings', 'false');
            } else {
                mark.style.backgroundColor = color;
                mark.style.borderRadius = '50%';
            }

            // 根据当前尺寸设置宽高和字体大小
            const currentSize = getCurrentSize();
            const settings = sizeSettings[currentSize];
            if (type === 'WeakElectric') {
                mark.style.width = settings.weakElectric.width;
                mark.style.height = settings.weakElectric.height;
                mark.style.fontSize = settings.labelFontSize; // 设置 "IDF" 字体大小
            } else {
                mark.style.width = settings.ap.width;
                mark.style.height = settings.ap.height;
            }

            // 创建标签
            if (label) {
                const labelDiv = document.createElement('div');
                labelDiv.classList.add('label');
                labelDiv.style.top = `calc(${y}% + 1px)`;
                labelDiv.style.left = `${x}%`;
                labelDiv.style.fontSize = settings.labelFontSize;
                labelDiv.textContent = label;
                labelDiv.setAttribute('data-mark-id', id); // 添加关联属性
                panzoomElement.appendChild(labelDiv);
            }

            return mark;
        };

        /**
         * 渲染标记汇总表单（合并AP和弱电井）
         */
        /**
         * 渲染标记汇总表单（合并AP和弱电井）
         */
        const renderMarkSummary = () => {
            const table = document.getElementById('mark-summary-table');
            const tbody = table.querySelector('tbody');
            const legendRow = tbody.rows[0]; // 图示行
            const descriptionRow = tbody.rows[1]; // 说明行
            const countRow = tbody.rows[2]; // 数量行

            // 清除之前的动态列（不清除第一列）
            while (legendRow.cells.length > 1) {
                legendRow.deleteCell(1);
            }
            while (descriptionRow.cells.length > 1) {
                descriptionRow.deleteCell(1);
            }
            while (countRow.cells.length > 1) {
                countRow.deleteCell(1);
            }
        
            // 获取所有 WeakElectric 标记的绑定 AP 数量
            fetch(`/api/get_weak_electric_bindings/${mapId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const bindingCounts = data.counts; // { color: total_bound_aps, ... }

                        // 收集 AP 类型和 WeakElectric 类型，统计数量
                        const apTypes = Object.keys(apDefinitions);
                        const weTypes = Object.keys(weak_electric_definitions);

                        // 统计 AP 数量（仅当前图纸）
                        const apTypesCounts = {}; // color: count
                        const apMarks = document.querySelectorAll('.mark:not(.weak-electric-mark)');
                        apMarks.forEach(mark => {
                            const color = mark.style.backgroundColor.toLowerCase();
                            if (color && apDefinitions[color]) {
                                apTypesCounts[color] = (apTypesCounts[color] || 0) + 1;
                            }
                        });

                        // 统计 WeakElectric 标记的数量（仅当前图纸）
                        const weMarkCounts = {}; // color: count
                        const weMarks = document.querySelectorAll('.mark.weak-electric-mark');
                        weMarks.forEach(weMark => {
                            const color = weMark.style.borderColor.toLowerCase();
                            if (color && weak_electric_definitions[color]) {
                                weMarkCounts[color] = (weMarkCounts[color] || 0) + 1;
                            }
                        });

                        // 过滤掉 AP 类型中数量为 0 的颜色
                        const filteredAPTypes = apTypes.filter(color => apTypesCounts[color] > 0);
                        // 过滤掉 WeakElectric 类型中标记数量为 0 的颜色，但不根据绑定 AP 数量进行过滤
                        const filteredWeTypes = weTypes.filter(color => weMarkCounts[color] > 0);

                        // **计算总的动态列数**
                        const totalColumns = filteredAPTypes.length + filteredWeTypes.length;

                        // **动态调整表格字体大小**
                        const baseFontSize = 14; // 基础字体大小
                        let adjustedFontSize = baseFontSize;
                        if (totalColumns > 7) {
                            // 每超过 7 列，字体减小 1px，最小不低于 8px
                            adjustedFontSize = Math.max(baseFontSize - (totalColumns - 7), 8);
                        }
                        table.style.fontSize = adjustedFontSize + 'px';

                        // **动态设置表格标题的 colspan 属性**
                        const headerRow = table.querySelector('thead tr');
                        const headerTh = headerRow.cells[1]; // 第二个 th
                        headerTh.setAttribute('colspan', totalColumns);

                        // 如果没有任何 AP 或 WeakElectric，显示提示
                        if (filteredAPTypes.length === 0 && filteredWeTypes.length === 0) {
                            // 在数量行中显示提示，并合并动态列的单元格
                            countRow.innerHTML = '<td>数量</td><td colspan="' + totalColumns + '">当前图纸没有 AP 或弱电井标记。</td>';
                            return;
                        }

                        // 生成动态列
                        filteredAPTypes.forEach(color => {
                            // 图示列
                            const legendCell = document.createElement('td');
                            const span = document.createElement('span');
                            span.classList.add('color-circle');
                            span.style.backgroundColor = color;
                            legendCell.appendChild(span);
                            legendRow.appendChild(legendCell);

                            // 说明列
                            const descCell = document.createElement('td');
                            descCell.textContent = apDefinitions[color] || '未定义';
                            descriptionRow.appendChild(descCell);

                            // 数量列
                            const countCell = document.createElement('td');
                            countCell.textContent = apTypesCounts[color] || 0;
                            countRow.appendChild(countCell);
                        });

                        filteredWeTypes.forEach(color => {
                            // 图示列
                            const legendCell = document.createElement('td');
                            const span = document.createElement('span');
                            span.classList.add('color-rectangle');
                            span.style.borderColor = color;
                            span.style.backgroundColor = 'transparent'; // 让矩形为空心
                            span.style.color = color; // 设置文字颜色
                            span.textContent = 'IDF';
                            legendCell.appendChild(span);
                            legendRow.appendChild(legendCell);

                            // 说明列
                            const descCell = document.createElement('td');
                            descCell.textContent = weak_electric_definitions[color] || '未定义';
                            descriptionRow.appendChild(descCell);

                            // 数量列
                            const countCell = document.createElement('td');
                            const totalBoundAPs = bindingCounts[color] || 0; // 使用 API 提供的绑定 AP 数量
                            countCell.textContent = `绑定 AP: ${totalBoundAPs}`;
                            countRow.appendChild(countCell);
                        });

                    } else {
                        console.error('Failed to fetch weak electric bindings:', data.message);
                        alert('获取弱电井绑定信息失败。');
                    }
                })
                .catch(err => {
                    console.error('Fetch Error:', err);
                    alert('获取弱电井绑定信息失败。');
                });
        };

        /**
         * 根据颜色获取绑定 AP 总数
         * @param {Array} weakElectricMarks - 弱电井标记数组
         * @param {string} color - 弱电井颜色
         * @returns {number} - 绑定 AP 总数
         */
        const getTotalBoundAPsForColor = (weakElectricMarks, color) => {
            let total = 0;
            weakElectricMarks.forEach(mark => {
                if (mark.color.toLowerCase() === color.toLowerCase()) {
                    total += mark.total_bound_aps;
                }
            });
            return total;
        };

        /**
         * 更新标记计数并重新渲染汇总
         * @param {string} color - 标记颜色
         * @param {number} delta - 增量（正数或负数）
         */
        const updateMarkCount = (color, delta) => {
            if (markCounts[color] !== undefined) {
                markCounts[color] += delta;
                if (markCounts[color] < 0) markCounts[color] = 0;
            } else if (delta > 0) {
                markCounts[color] = delta;
            }
            renderMarkSummary();
        };
        const updateMarkCountWithoutRenderMarkSummary = (color, delta) => {
            if (markCounts[color] !== undefined) {
                markCounts[color] += delta;
                if (markCounts[color] < 0) markCounts[color] = 0;
            } else if (delta > 0) {
                markCounts[color] = delta;
            }
        };

        /**
         * 应用规格设置
         * @param {string} size - 规格大小（large, medium, small）
         */
        const applySizeSettings = (size) => {
            const settings = sizeSettings[size];
            if (!settings) return;

            // 更新下拉按钮的文本
            const sizeText = size === 'large' ? '大' : size === 'medium' ? '中' : '小';
            apSizeDropdown.textContent = `AP点位规格：${sizeText}`;

            // 获取所有标记和标签
            const marks = document.querySelectorAll('.mark');
            const labels = document.querySelectorAll('.label');

            // 更新标记尺寸
            marks.forEach(mark => {
                if (mark.classList.contains('weak-electric-mark')) {
                    mark.style.width = settings.weakElectric.width;
                    mark.style.height = settings.weakElectric.height;
                    mark.style.fontSize = settings.labelFontSize; // 确保 "IDF" 字体大小
                } else {
                    mark.style.width = settings.ap.width;
                    mark.style.height = settings.ap.height;
                }
            });

            // 更新标签字体大小
            labels.forEach(label => {
                label.style.fontSize = settings.labelFontSize;
            });
        };

        /**
         * 保存规格设置到服务器
         * @param {string} size - 规格大小
         */
        const saveSizeSetting = (size) => {
            fetch(`/api/set_map_size/{{ map.id }}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ size })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    console.log(`AP点位规格设置为 ${size} 并已保存.`);
                } else {
                    alert('保存规格设置失败: ' + (data.message || '未知错误'));
                    console.error('Save size failed:', data);
                }
            })
            .catch(err => {
                console.error('Fetch Error:', err);
                alert('保存规格设置失败: ' + err);
            });
        };

        /**
         * 初始化颜色下拉菜单
         */
        const initializeColorDropdowns = () => {
            const addMarkForm = document.getElementById('addMarkForm');
            const addMarkColorSelect = document.getElementById('mark_color');
            const addAsWeakElectricCheckbox = document.getElementById('addAsWeakElectric');
            const addBindContainer = document.getElementById('add_bindToWeakElectricContainer');
            const addBindMapFloorSelect = document.getElementById('add_select_map_floor');
            const addBindWeakElectricSelect = document.getElementById('add_select_weak_electric');

            const editMarkForm = document.getElementById('editMarkForm');
            const editMarkColorSelect = document.getElementById('edit_mark_color');
            const editBindContainer = document.getElementById('edit_bindToWeakElectricContainer');
            const editBindMapFloorSelect = document.getElementById('edit_select_map_floor');
            const editBindWeakElectricSelect = document.getElementById('edit_select_weak_electric');

            const quickAddConfigForm = document.getElementById('quickAddConfigForm');
            const quickAddMarkColorSelect = document.getElementById('quickAdd_mark_color');
            const quickAddSelectMapFloorSelect = document.getElementById('quickAdd_select_map_floor');
            const quickAddSelectWeakElectricSelect = document.getElementById('quickAdd_select_weak_electric');

            // 绑定添加标记模态框的复选框事件
            addAsWeakElectricCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    // 添加为弱电井，隐藏绑定WeakElectric的下拉菜单
                    populateColorOptions(addMarkColorSelect, weak_electric_definitions, null, true);
                    add_bindToWeakElectricContainer.classList.add('d-none');
                } else {
                    // 添加为AP，显示绑定WeakElectric的下拉菜单
                    populateColorOptions(addMarkColorSelect, apDefinitions, null, false);
                    add_bindToWeakElectricContainer.classList.remove('d-none');
                    populateMapFloorSelect(addBindMapFloorSelect); // 填充图纸名/楼层
                    addBindWeakElectricSelect.disabled = true; // 初始禁用弱电井选择
                    // 设置图纸/楼层下拉菜单为当前楼层
                    const currentMapFloorKey = `${mapFloor}`;
                    addBindMapFloorSelect.value = currentMapFloorKey;
                    // 根据当前楼层加载弱电井选项
                    populateWeakElectricSelect(addBindWeakElectricSelect, currentMapFloorKey);
                    // 将弱电井下拉菜单默认选择为“不绑定”
                    addBindWeakElectricSelect.value = '';
                    // 确保弱电井下拉菜单被启用
                    addBindWeakElectricSelect.disabled = false;
                }
            });

            // 当模态框打开时，根据复选框状态设置颜色列表和绑定选项显示
            $('#addMarkModal').on('show.bs.modal', () => {
                const isWeakElectric = addAsWeakElectricCheckbox.checked;
                if (isWeakElectric) {
                    populateColorOptions(addMarkColorSelect, weak_electric_definitions, null, true);
                    addBindContainer.style.display = 'none';
                } else {
                    populateColorOptions(addMarkColorSelect, apDefinitions, null, false);
                    addBindContainer.style.display = 'block';
                    populateMapFloorSelect(addBindMapFloorSelect); // 填充图纸名/楼层

                    // 默认选择当前图纸/楼层
                    const currentMapFloorKey = `${mapFloor}`; // 使用已在JavaScript中定义的mapFloor
                    addBindMapFloorSelect.value = currentMapFloorKey;
                    populateWeakElectricSelect(addBindWeakElectricSelect, currentMapFloorKey);
                }

                // 清空标签
                document.getElementById('mark_label').value = '';

                // 清空绑定WeakElectric下拉菜单
                // addBindWeakElectricSelect.value = '';
            });

            // 绑定图纸名/楼层选择事件以填充弱电井下拉菜单
            addBindMapFloorSelect.addEventListener('change', function() {
                const selectedMapFloor = this.value;
                populateWeakElectricSelect(addBindWeakElectricSelect, selectedMapFloor);
            });
        
            // 绑定图纸名/楼层选择事件以填充WeakElectric下拉菜单（Edit Modal）
            editBindMapFloorSelect.addEventListener('change', function() {
                const selectedMapFloor = this.value;
                populateWeakElectricSelect(editBindWeakElectricSelect, selectedMapFloor);
            });

            // 编辑标记模态框不允许更改类型，因此颜色列表根据当前标记类型进行填充
            $('#editMarkModal').on('show.bs.modal', () => {
                const markId = document.getElementById('edit_mark_id').value;
                const markElement = document.getElementById(`mark-${markId}`);
                const markType = markElement.getAttribute('data-type');
                const markColor = markElement.style.backgroundColor || markElement.style.borderColor;
                let normalizedColor = markColor;

                // 标准化颜色名称
                const tempDiv = document.createElement('div');
                tempDiv.style.color = markColor;
                document.body.appendChild(tempDiv);
                normalizedColor = getComputedStyle(tempDiv).color;
                document.body.removeChild(tempDiv);
                normalizedColor = colorNameFromRGB(normalizedColor).toLowerCase();

                if (markType === 'WeakElectric') {
                    populateColorOptions(editMarkColorSelect, weak_electric_definitions, normalizedColor, true);
                    showApBindingsButton.style.display = 'inline-block';
                    edit_bindToWeakElectricContainer.classList.add('d-none');
                } else {
                    populateColorOptions(editMarkColorSelect, apDefinitions, normalizedColor, false);
                    edit_bindToWeakElectricContainer.classList.remove('d-none');
                    let weakElectricId = markElement.getAttribute('data-weak-electric-id');
                    weakElectricId = weakElectricId && weakElectricId.trim() !== '' ? parseInt(weakElectricId) : null;
                    loadWeakElectricOptions('edit', weakElectricId); // 传递 weakElectricId，可能为 null
                }

            });

            // 当快捷添加配置模态框打开时，初始化颜色和弱电井选项
            $('#quickAddConfigModal').on('show.bs.modal', () => {
                populateColorOptions(quickAddMarkColorSelect, apDefinitions, null, false);
                populateMapFloorSelect(quickAddSelectMapFloorSelect); // 填充图纸名/楼层
                
                // 默认选择当前楼层
                const currentMapFloorKey = `${mapFloor}`; 
                quickAddSelectMapFloorSelect.value = currentMapFloorKey;
                populateWeakElectricSelect(quickAddSelectWeakElectricSelect, currentMapFloorKey);
                
                if (quickAddAutoLabelCheckbox.checked) {
                    quickAddMarkLabelInput.value = '';
                    quickAddMarkLabelInput.disabled = true;
                } else {
                    quickAddMarkLabelInput.disabled = false;
                }
            });

            // 绑定图纸名/楼层选择事件以填充弱电井下拉菜单
            quickAddSelectMapFloorSelect.addEventListener('change', function() {
                const selectedMapFloor = this.value;
                populateWeakElectricSelect(quickAddSelectWeakElectricSelect, selectedMapFloor);
            });
        };
        /**
         * 根据定义填充颜色选项
         * @param {HTMLElement} selectElement - 下拉选择框元素
         * @param {object} definitions - 定义对象
         * @param {string} [selectedColor] - 预选颜色
         * @param {boolean} isWeakElectric - 是否为 WeakElectric 标记
         */
        const populateColorOptions = (selectElement, definitions, selectedColor = null, isWeakElectric = false) => {
            selectElement.innerHTML = '';
            // 移除前端对WeakElectric颜色的限制，显示所有已定义的颜色
            const availableColors = Object.keys(definitions);

            availableColors.forEach(color => {
                const option = document.createElement('option');
                option.value = color;
                if (isWeakElectric) {
                    // 显示格式为“颜色 <弱电井定义>”
                    option.textContent = `${colorLabelMap[color]} <${weak_electric_definitions[color]}>`;
                } else {
                    option.textContent = `${colorLabelMap[color]} <${apDefinitions[color]}>`;
                }
                if (selectedColor && color.toLowerCase() === selectedColor.toLowerCase()) {
                    option.selected = true;
                }
                selectElement.appendChild(option);
            });
        };

        /**
         * 从RGB颜色值获取颜色名称
         * @param {string} rgb - RGB颜色值，如 "rgb(255, 0, 0)"
         * @returns {string} - 颜色名称，如 "red"
         */
        const colorNameFromRGB = (rgb) => {
            const colorMap = {
                'rgb(255, 0, 0)': 'red',
                'rgb(0, 0, 255)': 'blue',
                'rgb(0, 128, 0)': 'green',
                'rgb(255, 255, 0)': 'yellow',
                'rgb(128, 0, 128)': 'purple',
                'rgb(255, 165, 0)': 'orange',
                'rgb(0, 0, 0)': 'black'
            };
            return colorMap[rgb] || '';
        };

        /**
         * 绑定下拉菜单项点击事件
         */
        const bindDropdownEvents = () => {
            dropdownItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    const selectedSize = item.getAttribute('data-size');
                    applySizeSettings(selectedSize);
                    saveSizeSetting(selectedSize);
                });
            });
        };

        /**
         * 初始化并应用已保存的规格设置
         */
        const initializeSizeSetting = () => {
            fetch(`/api/get_map_size/{{ map.id }}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' && data.size) {
                    applySizeSettings(data.size);
                } else {
                    applySizeSettings('medium');
                }
            })
            .catch(err => {
                console.error('Fetch Error:', err);
                applySizeSettings('medium');
            });
        };

        /**
         * 初始化 Panzoom
         */
        const initializePanzoom = () => {
            try {
                panzoomInstance = Panzoom(panzoomElement, {
                    maxScale: 10,
                    contain: 'outside',
                    startScale: 1,
                    startX: 0,
                    startY: 0,
                    filter: (e) => !(e.target.closest('.mark') || e.target.closest('.label'))
                });
                console.log('Panzoom initialized successfully.');

                // 绑定鼠标滚轮事件用于缩放
                panzoomElement.parentElement.addEventListener('wheel', panzoomInstance.zoomWithWheel);

                // 右键拖动平移
                let isPanning = false;
                let startX, startY;

                panzoomElement.parentElement.addEventListener('mousedown', (e) => {
                    if (e.button === 2) { // 右键
                        isPanning = true;
                        startX = e.clientX;
                        startY = e.clientY;
                        panzoomElement.style.cursor = 'grabbing';
                        e.preventDefault();
                    }
                });

                document.addEventListener('mousemove', (e) => {
                    if (isPanning && panzoomInstance) {
                        const dx = e.clientX - startX;
                        const dy = e.clientY - startY;
                        panzoomInstance.panBy(dx, dy);
                        startX = e.clientX;
                        startY = e.clientY;
                    }
                });

                document.addEventListener('mouseup', (e) => {
                    if (isPanning && e.button === 2 && panzoomInstance) {
                        isPanning = false;
                        panzoomElement.style.cursor = 'grab';
                    }
                });

                // 禁用右键菜单
                panzoomElement.parentElement.addEventListener('contextmenu', (e) => {
                    e.preventDefault();
                });
            } catch (error) {
                console.error('Panzoom initialization failed:', error);
            }
        };

 /**
 * 绑定事件到标记
 * @param {HTMLElement} mark - 标记元素
 */
const bindMarkEvents = (mark) => {
    if (isMobileDevice()) {
        // 移动端逻辑
        let touchStartTime = 0;
        let touchTimeout = null;
        let touchMoved = false;
        const LONG_PRESS_DURATION = 500; // 长按时间阈值（毫秒）

        const onTouchStart = (e) => {
            e.preventDefault();
            e.stopPropagation();
            touchMoved = false;
            touchStartTime = Date.now();
            touchTimeout = setTimeout(() => {
                // 长按检测，执行抓取
                grabMark(mark);
            }, LONG_PRESS_DURATION);
        };

        const onTouchMove = (e) => {
            touchMoved = true;
            // 如果在长按期间检测到移动，则取消长按计时器
            if (touchTimeout) {
                clearTimeout(touchTimeout);
                touchTimeout = null;
            }
        };

        const onTouchEnd = (e) => {
            e.preventDefault();
            e.stopPropagation();
            const touchEndTime = Date.now();
            const touchDuration = touchEndTime - touchStartTime;

            if (touchTimeout) {
                clearTimeout(touchTimeout);
                touchTimeout = null;
            }

            if (!touchMoved && touchDuration < LONG_PRESS_DURATION) {
                // 短按，执行编辑标记逻辑
                const markId = mark.dataset.markId;
                console.log(`Mark clicked: ID=${markId}`);

                fetch(`/api/get_mark/${markId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success' && data.mark) {
                        const editMarkForm = document.getElementById('editMarkForm');
                        editMarkForm.reset();
                        document.getElementById('edit_mark_id').value = data.mark.id;
                        document.getElementById('edit_mark_label').value = data.mark.label || '';
                        document.getElementById('edit_mark_color').value = data.mark.color;

                        const bindContainer = document.getElementById('edit_bindToWeakElectricContainer');
                        const bindSelect = document.getElementById('edit_select_weak_electric');

                        const showApBindingsBtn = document.getElementById('showApBindingsButton');

                        if (data.mark.type === 'AP') {
                            bindContainer.style.display = 'block';
                            showApBindingsBtn.style.display = 'none';
                            loadWeakElectricOptions('edit', data.mark.weak_electric_id);
                        } else {
                            bindContainer.style.display = 'none';
                            showApBindingsBtn.style.display = 'inline-block';
                        }

                        $('#editMarkModal').modal('show');
                    } else {
                        alert('获取标记信息失败: ' + (data.message || '未知错误'));
                    }
                })
                .catch(err => {
                    console.error('Fetch Error:', err);
                    alert('获取标记信息失败: ' + err);
                });
            }
            // 如果是长按，已经在 touchstart 中处理，无需额外操作
        };

        mark.addEventListener('touchstart', onTouchStart);
        mark.addEventListener('touchmove', onTouchMove);
        mark.addEventListener('touchend', onTouchEnd);

        // 防止长按出现上下文菜单（例如保存图片、分享等）
        mark.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });

    } else {
        // 桌面端逻辑保持不变
        mark.addEventListener('click', (e) => {
           if (e.ctrlKey || e.metaKey) {
                grabMark(mark);
                return;
            }
            if (e.shiftKey) {
                // Shift + 左键点击，执行快捷删除或提示
                const markId = mark.dataset.markId;
                const markType = mark.getAttribute('data-type');
                if (markType === 'AP') {
                    // 执行快捷删除 AP
                    quickDeleteAP(markId);
                } else if (markType === 'WeakElectric') {
                    // 弹出提示
                    alert('弱电井无法快捷删除');
                }
                return; // 结束处理，避免继续执行下面的代码
            }
            // 继续原有的点击处理逻辑
            e.preventDefault();
            e.stopPropagation();
            const markId = mark.dataset.markId;
            console.log(`Mark clicked: ID=${markId}`);

            fetch(`/api/get_mark/${markId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' && data.mark) {
                    const editMarkForm = document.getElementById('editMarkForm');
                    editMarkForm.reset();
                    document.getElementById('edit_mark_id').value = data.mark.id;
                    document.getElementById('edit_mark_label').value = data.mark.label || '';
                    document.getElementById('edit_mark_color').value = data.mark.color;

                    const bindContainer = document.getElementById('edit_bindToWeakElectricContainer');
                    const bindSelect = document.getElementById('edit_select_weak_electric');

                    const showApBindingsBtn = document.getElementById('showApBindingsButton');

                    if (data.mark.type === 'AP') {
                        bindContainer.style.display = 'block';
                        showApBindingsBtn.style.display = 'none';
                        loadWeakElectricOptions('edit', data.mark.weak_electric_id);
                    } else {
                        bindContainer.style.display = 'none';
                        showApBindingsBtn.style.display = 'inline-block';
                    }

                    $('#editMarkModal').modal('show');
                } else {
                    alert('获取标记信息失败: ' + (data.message || '未知错误'));
                }
            })
            .catch(err => {
                console.error('Fetch Error:', err);
                alert('获取标记信息失败: ' + err);
            });
        });
		
        // 新增的右键点击事件监听
        mark.addEventListener('contextmenu', (e) => {
            e.preventDefault(); // 阻止默认的右键菜单
            if (e.shiftKey) {
                const markId = mark.dataset.markId;
                const markType = mark.getAttribute('data-type');
                if (markType === 'AP') {
                    if (quickAddConfig) {
                        // 执行快捷编辑
                        quickEditAP(markId);
                    } else {
                        alert('请先配置快捷添加来适配快捷编辑。');
                    }
                } else if (markType === 'WeakElectric') {
                    alert('弱电井不支持快捷编辑。');
                }
                return; // 结束处理，避免继续执行下面的代码
            }
            // 如果需要处理其他右键操作，可以在这里添加代码
        });
		
    }
};

/**
 * 检测是否为移动设备
 * @returns {boolean} - 如果是移动设备则返回 true
 */
function isMobileDevice() {
    return /Mobi|Android|iPhone|iPad|iPod|Windows Phone|Opera Mini/i.test(navigator.userAgent);
}

/**
 * 快捷删除 AP 标记及其绑定关系
 * @param {number} markId - 标记ID
 */
const quickDeleteAP = (markId) => {
    fetch(`/api/delete_mark/${markId}?force=true`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Quick Delete AP Response:', data);
        if (data.status === 'success') {
            const markElement = document.getElementById(`mark-${markId}`);
            if (markElement) {
                const labelElement = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
                let color;
                let markType;
                if (markElement.classList.contains('weak-electric-mark')) {
                    color = markElement.style.borderColor.toLowerCase();
                    markType = 'WeakElectric';
                } else {
                    color = markElement.style.backgroundColor.toLowerCase();
                    markType = 'AP';
                }

                // 记录被删除的标记信息
                const deletedMark = {
                    id: markId,
                    x: parseFloat(markElement.style.left),
                    y: parseFloat(markElement.style.top),
                    color: markType === 'WeakElectric' ? markElement.style.borderColor : markElement.style.backgroundColor,
                    type: markType,
                    label: labelElement ? labelElement.textContent : '',
                    weak_electric_id: markElement.getAttribute('data-weak-electric-id') ? parseInt(markElement.getAttribute('data-weak-electric-id')) : null
                };

                // 记录“删除”动作
                pushAction({
                    type: 'delete',
                    mark: deletedMark
                });

                markElement.remove();
                if (labelElement) {
                    labelElement.remove();
                }
                
                // 移除绑定标签
                const bindingLabel = document.querySelector(`.binding-label[data-mark-id="${markId}"]`);
                if (bindingLabel) {
                    bindingLabel.remove();
                }

                if (!markElement.classList.contains('weak-electric-mark')) {
                    if (color) {
                        updateMarkCount(color, -1);
                    }
                }

                if (markElement.classList.contains('weak-electric-mark')) {
                    const index = weakElectricUsedColors.indexOf(color);
                    if (index > -1) {
                        weakElectricUsedColors.splice(index, 1);
                    }
                    // 对于WeakElectric标记，直接重新渲染汇总
                    renderMarkSummary();
                    loadWeakElectricData(() => {
                        if (apBindingLabelsVisible) {
                            removeApBindingLabels();
                            loadApBindingLabels();
                        }
                    });
                }

                $('#editMarkModal').modal('hide');
                console.log(`Mark ${markId} deleted quickly.`);
            }
        } else {
            alert('快捷删除AP失败: ' + (data.message || '未知错误'));
            console.error('Quick delete AP failed:', data);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
        alert('快捷删除AP失败: ' + err);
    });
};
		
/**
 * 快捷编辑 AP 标记
 * @param {number} markId - 标记ID
 */
const quickEditAP = (markId) => {
    if (!quickAddConfig) {
        alert('请先配置快捷添加来适配快捷编辑。');
        return;
    }

    const markElement = document.getElementById(`mark-${markId}`);
    const markType = markElement.getAttribute('data-type');

    if (markType !== 'AP') {
        alert('弱电井不支持快捷编辑。');
        return;
    }

    const color = quickAddConfig.color;
    let weakElectricId = null;
    const selectedMapFloor = quickAddConfig.select_map_floor;
    if (selectedMapFloor) {
        weakElectricId = parseInt(quickAddConfig.select_weak_electric) || null;
    }

    // 保留当前的标签
    const labelDiv = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
    const label = labelDiv ? labelDiv.textContent : '';

    // 获取原始颜色和绑定信息，用于撤销
    const originalColor = markElement.style.backgroundColor.toLowerCase();
    const originalWeakElectricId = markElement.getAttribute('data-weak-electric-id') || null;

    // 记录编辑前的状态
    const previousState = {
        label: label,
        color: originalColor,
        weak_electric_id: originalWeakElectricId
    };

    // 发送更新请求
    fetch(`/edit_mark/${markId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ label, color, weak_electric_id: weakElectricId })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Quick Edit Mark Response:', data);
        if (data.status === 'success') {
            // 更新标记的颜色
            markElement.style.backgroundColor = color;
            // 更新绑定弱电井的属性
            markElement.setAttribute('data-weak-electric-id', weakElectricId || '');

            // 更新绑定标签（如果显示）
            if (apBindingLabelsVisible) {
                updateBindingLabelForMark(markElement);
            }

            // 更新统计计数
            if (originalColor && originalColor !== color.toLowerCase()) {
                updateMarkCountWithoutRenderMarkSummary(originalColor, -1);
                updateMarkCountWithoutRenderMarkSummary(color.toLowerCase(), 1);
            }
            // 重新渲染统计表
            renderMarkSummary();

            // 记录“编辑”动作
            pushAction({
                type: 'edit',
                markId: markId,
                previousState: previousState
            });

            console.log(`Mark ${markId} quick edited successfully.`);
        } else {
            alert('快捷编辑标记失败: ' + (data.message || '未知错误'));
            console.error('Quick Edit mark failed:', data);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
        alert('快捷编辑标记失败: ' + err);
    });
};

        /**
         * 绑定所有现有标记事件
         */
        const bindAllMarks = () => {
            const marks = document.querySelectorAll('.mark');
            marks.forEach(mark => bindMarkEvents(mark));
        };

        /**
         * 绑定“还原视角”和“导出PDF”按钮事件
         */
        const bindButtonEvents = () => {
            document.getElementById('configureQuickAddButton').addEventListener('click', () => {
                $('#quickAddConfigModal').modal('show');
            });
            document.getElementById('restoreViewButton').addEventListener('click', restoreView);
            document.getElementById('exportPdfButton').addEventListener('click', () => {
                const confirmExport = confirm('导出pdf会根据当前图纸视角进行，请确保当前图纸的全部区域都显示在编辑区域。你可以通过点击【还原视角】按钮将全部图纸区域快速还原到编辑区域。\n\n是否继续导出PDF？');
                if (confirmExport) {
                    exportMapToPDF();
                } else {
                    console.log('用户取消了导出PDF操作。');
                }
            });
			
			document.getElementById('cachePdfButton').addEventListener('click', () => {
			
  		      if (isSafari()) {
                  // Safari 浏览器不支持该功能，提示用户
                  alert('Safari浏览器不支持缓存 PDF 功能。请尝试使用Chrome浏览器。');
                  return; // 阻止进一步操作
                }
			
			    const confirmCache = confirm('缓存 PDF 会根据当前图纸视角进行，请确保当前图纸的全部区域都显示在编辑区域。你可以通过点击【还原视角】按钮将全部图纸区域快速还原到编辑区域。\n\n是否继续缓存 PDF？');
				if (confirmCache) {
				    exportMapToPDF('cache');
			    } else {
				    console.log('用户取消了缓存 PDF 操作。');
				}
			});
		

            document.getElementById('showApBindingsButton').addEventListener('click', () => {
                const markId = document.getElementById('edit_mark_id').value;
                showApBindings(markId);
            });

            // 处理“配置快捷添加”表单提交
            document.getElementById('quickAddConfigForm').addEventListener('submit', (e) => {
                e.preventDefault();

                const color = document.getElementById('quickAdd_mark_color').value;
                const label = document.getElementById('quickAdd_mark_label').value;
                const selectMapFloor = document.getElementById('quickAdd_select_map_floor').value;
                const selectWeakElectric = document.getElementById('quickAdd_select_weak_electric').value || null;
                const autoLabel = document.getElementById('quickAdd_auto_label').checked;

                quickAddConfig = {
                    color: color,
                    label: label,
                    select_map_floor: selectMapFloor,
                    select_weak_electric: selectWeakElectric,
                    autoLabel: autoLabel // 保存“快速标签”选项
                };
                $('#quickAddConfigModal').modal('hide');
                alert('快捷添加配置已保存。');
            });
        
            // 处理“清除配置”按钮点击事件
            document.getElementById('clearQuickAddConfigButton').addEventListener('click', () => {
                quickAddConfig = null;
                alert('快捷添加配置已清除。');
            });
        };

        /**
         * 还原 Panzoom 状态
         */
        const restorePanzoomState = () => {
            const savedScale = localStorage.getItem('panzoomScale');
            const savedX = localStorage.getItem('panzoomX');
            const savedY = localStorage.getItem('panzoomY');
            if (savedScale && savedX !== null && savedY !== null && panzoomInstance) {
                panzoomInstance.zoom(parseFloat(savedScale), { animate: false });
                panzoomInstance.pan(parseFloat(savedX), parseFloat(savedY), { animate: false });
                console.log('Panzoom state restored:', {
                    scale: parseFloat(savedScale),
                    x: parseFloat(savedX),
                    y: parseFloat(savedY)
                });
                // 清除保存的状态
                localStorage.removeItem('panzoomScale');
                localStorage.removeItem('panzoomX');
                localStorage.removeItem('panzoomY');
            }
        };

        /**
         * 还原视角
         */
        const restoreView = () => {
            if (panzoomInstance) {
                panzoomInstance.reset();
                console.log('视角已还原到初始状态。');
            }
        };

        const exportMapToPDF = (action = 'download') => {
            console.log('Export PDF function triggered with action:', action);
            const now = new Date();
            const formattedDate = now.toISOString().replace(/[:.-]/g, '').slice(0, 15);
            const projectName = "{{ map.project.name }}";
            const mapName = "{{ map.name }}";
            const mapFloor = "{{ map.floor }}";
            const fileName = `${projectName}-${mapName}_${mapFloor}-${formattedDate}.pdf`;

            const titleElement = document.querySelector('h1');
            const markSummary = document.getElementById('mark-summary');
            const mapContainer = document.getElementById('map-container');
            const signatureFormContainer = document.getElementById('signatureFormContainer'); // 获取署名表单元素

            const A4_WIDTH = 210;
            const A4_HEIGHT = 297;
            const MARGIN = 10;
            const AVAILABLE_WIDTH = A4_WIDTH - 2 * MARGIN;
            const AVAILABLE_HEIGHT = A4_HEIGHT - 2 * MARGIN;

            const DPI = 96;
            const pxToMm = (px) => px * 25.4 / DPI;

            // 检查签名功能是否开启
            const signatureEnabledNow = signatureEnabled; // 确保signatureEnabled已正确设置

            // 开始生成PDF内容
            html2canvas(titleElement, { scale: 3.0, useCORS: true }).then(canvasTitle => {
                const titleImage = canvasTitle.toDataURL('image/jpeg');
                const titleWidthMm = pxToMm(canvasTitle.width);
                const titleHeightMm = pxToMm(canvasTitle.height);
                const titleDimensions = getScaledDimensions(titleWidthMm, titleHeightMm, AVAILABLE_WIDTH, AVAILABLE_HEIGHT);

                html2canvas(markSummary, { scale: 3.0, useCORS: true }).then(canvasSummary => {
                    const summaryImage = canvasSummary.toDataURL('image/jpeg');
                    const summaryWidthMm = pxToMm(canvasSummary.width);
                    const summaryHeightMm = pxToMm(canvasSummary.height);
                    const summaryDimensions = getScaledDimensions(summaryWidthMm, summaryHeightMm, AVAILABLE_WIDTH, AVAILABLE_HEIGHT);

                    html2canvas(mapContainer, { scale: 3.0, useCORS: true }).then(canvasMap => {

                        // **在这里进行长宽比的检查和调整**
                        const aspectRatio = canvasMap.height / canvasMap.width;

                        if (aspectRatio > 1.15) {
                            // 需要调整
                            const desiredAspectRatio = 1.15;
                            const desiredWidth = Math.round(canvasMap.height / desiredAspectRatio);
                            const extraWidth = desiredWidth - canvasMap.width;

                            // 创建新的 Canvas
                            const newCanvas = document.createElement('canvas');
                            newCanvas.width = desiredWidth;
                            newCanvas.height = canvasMap.height;

                            const ctx = newCanvas.getContext('2d');

                            // 填充白色背景
                            ctx.fillStyle = '#FFFFFF';
                            ctx.fillRect(0, 0, newCanvas.width, newCanvas.height);

                            // 将原始图像居中绘制到新 Canvas
                            const offsetX = Math.round(extraWidth / 2);
                            ctx.drawImage(canvasMap, offsetX, 0);

                            // 用新的 Canvas 替换原来的 canvasMap
                            canvasMap = newCanvas;
                        }

                        const mapImage = canvasMap.toDataURL('image/jpeg');
                        const mapWidthMm = pxToMm(canvasMap.width);
                        const mapHeightMm = pxToMm(canvasMap.height);
                        const mapDimensions = getScaledDimensions(mapWidthMm, mapHeightMm, AVAILABLE_WIDTH, AVAILABLE_HEIGHT);

                        // 定义一个函数，用于生成PDF
                        const generatePDF = (signatureImageData, signatureDimensions) => {
                            const { jsPDF } = window.jspdf;
                            const pdf = new jsPDF('p', 'mm', 'a4');

                            let yPosition = MARGIN;

                            // 添加标题
                            pdf.addImage(titleImage, 'PNG', MARGIN, yPosition, titleDimensions.width, titleDimensions.height);
                            yPosition += titleDimensions.height + 5;

                            // 添加标记汇总表单
                            if (yPosition + summaryDimensions.height + 5 > A4_HEIGHT - MARGIN) {
                                pdf.addPage();
                                yPosition = MARGIN;
                            }
                            pdf.addImage(summaryImage, 'PNG', MARGIN, yPosition, summaryDimensions.width, summaryDimensions.height);
                            yPosition += summaryDimensions.height + 5;

                            // 计算剩余高度，考虑签名表单的高度
                            let remainingHeight = A4_HEIGHT - MARGIN - yPosition;
                            if (signatureEnabledNow && signatureDimensions) {
                                remainingHeight -= signatureDimensions.height + 5; // 留出签名表单的空间和间距
                            }

                            // 如果图纸图片高度超过剩余空间，需要添加新页面
                            if (mapDimensions.height > remainingHeight) {
                                pdf.addPage();
                                yPosition = MARGIN;
                                remainingHeight = A4_HEIGHT - MARGIN - yPosition;
                                if (signatureEnabledNow && signatureDimensions) {
                                    remainingHeight -= signatureDimensions.height + 5;
                                }
                            }

                            pdf.addImage(mapImage, 'PNG', MARGIN, yPosition, mapDimensions.width, mapDimensions.height);
                            yPosition += mapDimensions.height + 5;

                            // 添加签名表单
                            if (signatureEnabledNow && signatureImageData && signatureDimensions) {
                                // 如果剩余空间不足以容纳签名表单，添加新页面
                                if (yPosition + signatureDimensions.height + 5 > A4_HEIGHT - MARGIN) {
                                    pdf.addPage();
                                    yPosition = MARGIN;
                                }

                                // 将yPosition设置为页面底部减去 MARGIN 和签名表单高度
                                yPosition = A4_HEIGHT - MARGIN - signatureDimensions.height;

                                pdf.addImage(signatureImageData, 'PNG', MARGIN, yPosition, signatureDimensions.width, signatureDimensions.height);
                            }

                            // **在下载PDF之前添加水印**
                            const canvas = document.createElement('canvas');
                            const context = canvas.getContext('2d');
                            const dpi = 96;
                            const mmToInch = 1 / 25.4;
                            const pageWidthPx = pdf.internal.pageSize.getWidth() * dpi * mmToInch;
                            const pageHeightPx = pdf.internal.pageSize.getHeight() * dpi * mmToInch;
                            canvas.width = pageWidthPx;
                            canvas.height = pageHeightPx;

                            // 设置透明度为10%
                            context.globalAlpha = 0.05;
                            // 计算页面对角线长度
                            const diagonalPx = Math.sqrt(pageWidthPx ** 2 + pageHeightPx ** 2);

                            // 设置字体和样式
                            let fontSize = diagonalPx / 8; // 将字体大小设置为对角线长度的1/8，可根据需要调整	
                            context.font = `bold ${fontSize}px Arial`;
                            // 设置文本颜色为黑色
                            context.fillStyle = '#000000';
                            context.textAlign = 'center';
                            context.textBaseline = 'middle';
                            // 测量文本宽度
                            let text = 'LinkBroad';
                            let textMetrics = context.measureText(text);
                            let textWidth = textMetrics.width;
                            // 调整字体大小，直到文本宽度略大于对角线长度
                            while (textWidth < diagonalPx) {
                                fontSize += 10; // 增加字体大小
                                context.font = `bold ${fontSize}px Arial`;
                                textMetrics = context.measureText(text);
                                textWidth = textMetrics.width;
                            }
                            fontSize -= 40; // 减少字体大小
                            context.font = `bold ${fontSize}px Arial`;
                            textMetrics = context.measureText(text);
                            textWidth = textMetrics.width;

                            // 计算旋转角度（从左上角到右下角）
                            const angle = Math.atan2(pageHeightPx, pageWidthPx);
                            // 将 Canvas 原点移动到页面中心
                            context.translate(pageWidthPx / 2, pageHeightPx / 2);
                            // 旋转 Canvas
                            context.rotate(angle);
                            // 绘制文本
                            context.fillText('LinkBroad', 0, 0);
                            // 将 Canvas 转换为图像
                            const watermarkImage = canvas.toDataURL('image/png');
                            // 将水印图像添加到 PDF
                            pdf.addImage(watermarkImage, 'PNG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight());
if (action === 'download') {
    // 下载PDF
    pdf.save(fileName);
    console.log('PDF saved:', fileName);
} else if (action === 'cache') {
    // 缓存该PDF
    try {
        const pdfBlob = pdf.output('blob');
        cachePdfOnClient(pdfBlob, fileName);
    } catch (err) {
        console.error('Error generating PDF blob:', err);
        alert('缓存PDF失败，请重试。');
    }
}

                        };

                        // 如果签名功能开启，获取签名表单的图像和尺寸
                        if (signatureEnabledNow && signatureFormContainer) {
                            html2canvas(signatureFormContainer, { scale: 3.0, useCORS: true }).then(canvasSignature => {
                                const signatureImage = canvasSignature.toDataURL('image/jpeg');
                                const signatureWidthMm = pxToMm(canvasSignature.width);
                                const signatureHeightMm = pxToMm(canvasSignature.height);
                                const signatureDimensions = getScaledDimensions(signatureWidthMm, signatureHeightMm, AVAILABLE_WIDTH, AVAILABLE_HEIGHT);

                                generatePDF(signatureImage, signatureDimensions);
                            }).catch(err => {
                                console.error('Error capturing signature form:', err);
                                alert('导出PDF失败，签名异常。');
                            });
                        } else {
                            // 未开启签名功能，直接生成PDF
                            generatePDF(null, null);
                        }

                    }).catch(err => {
                        console.error('Error capturing map image:', err);
                        alert('导出PDF失败（图纸捕获失败），请重试。');
                    });
                }).catch(err => {
                    console.error('Error capturing mark summary:', err);
                    alert('导出PDF失败（标记汇总捕获失败），请重试。');
                });
            }).catch(err => {
                console.error('Error capturing title:', err);
                alert('导出PDF失败（标题捕获失败），请重试。');
            });
        };
        /**
         * 抓取标记
         * @param {HTMLElement} mark - 标记元素
         */
        const grabMark = (mark) => {
            if (grabbedMark) {
                cancelGrab();
            }

            grabbedMark = mark;
            grabbedMark.classList.add('dragging');
            console.log(`Grabbing mark ID=${grabbedMark.dataset.markId}`);
			
			// 记录移动前的位置
            const initialPosition = {
                x: parseFloat(mark.style.left),
                y: parseFloat(mark.style.top)
            };

            const overlay = document.createElement('div');
            overlay.id = 'drag-overlay';
            Object.assign(overlay.style, {
                position: 'fixed',
                top: '0',
                left: '0',
                width: '100%',
                height: '100%',
                cursor: 'grabbing',
                zIndex: '9999'
            });
            document.body.appendChild(overlay);

            const onMouseMove = (e) => {
                const rect = panzoomElement.getBoundingClientRect();
                let x = ((e.clientX - rect.left) / rect.width) * 100;
                let y = ((e.clientY - rect.top) / rect.height) * 100;

                x = Math.max(0, Math.min(100, x));
                y = Math.max(0, Math.min(100, y));

                mark.style.left = `${x}%`;
                mark.style.top = `${y}%`;

                const label = document.querySelector(`.label[data-mark-id="${mark.dataset.markId}"]`);
                if (label) {
                    label.style.left = `${x}%`;
                    label.style.top = `calc(${y}% + 1px)`;
                }
                const bindingLabel = document.querySelector(`.binding-label[data-mark-id="${mark.dataset.markId}"]`);
                if (bindingLabel) {
                    bindingLabel.style.left = mark.style.left;
                    bindingLabel.style.top = mark.style.top;
                }
            };

            const onClickPlace = (e) => {
                const rect = panzoomElement.getBoundingClientRect();
                let x = ((e.clientX - rect.left) / rect.width) * 100;
                let y = ((e.clientY - rect.top) / rect.height) * 100;

                x = Math.max(0, Math.min(100, x));
                y = Math.max(0, Math.min(100, y));

                mark.style.left = `${x}%`;
                mark.style.top = `${y}%`;

                const label = document.querySelector(`.label[data-mark-id="${mark.dataset.markId}"]`);
                if (label) {
                    label.style.left = `${x}%`;
                    label.style.top = `calc(${y}% + 1px)`;
                }

                console.log(`Mark ID=${mark.dataset.markId} moved to x=${x}, y=${y}`);

                const markId = mark.dataset.markId;
                fetch(`/api/update_mark_position/${markId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ x, y })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        console.log(`Mark ${markId} position updated to x: ${x}, y: ${y}`);
						// 记录“移动”动作
						pushAction({
						    type: 'move',
							markId: markId,
							previousPosition: initialPosition,
							newPosition: { x, y }
						});
                    } else {
                        alert('更新标记位置失败: ' + (data.message || '未知错误'));
                    }
                })
                .catch(err => {
                    console.error('Fetch Error:', err);
                    alert('更新标记位置失败: ' + err);
                });

                cancelGrab();
            };

            const cancelGrab = () => {
                if (grabbedMark) {
                    grabbedMark.classList.remove('dragging');
                    console.log(`Cancelled grabbing mark ID=${grabbedMark.dataset.markId}`);
                    grabbedMark = null;
                }
                if (overlay) {
                    overlay.removeEventListener('mousemove', onMouseMove);
                    overlay.removeEventListener('click', onClickPlace);
                    document.body.removeChild(overlay);
                    console.log('Overlay removed.');
                }
                document.removeEventListener('keydown', onKeyDown);
            };

            const onKeyDown = (e) => {
                if (e.key === 'Escape') {
                    cancelGrab();
                }
            };

            overlay.addEventListener('mousemove', onMouseMove);
            overlay.addEventListener('click', onClickPlace);
            document.addEventListener('keydown', onKeyDown);

            overlay.addEventListener('click', function once() {
                cancelGrab();
                overlay.removeEventListener('click', once);
                document.removeEventListener('keydown', onKeyDown);
            });
        };

        /**
         * 添加标记表单提交处理
         */
        const handleAddMarkForm = () => {
            const addMarkForm = document.getElementById('addMarkForm');
            let isSubmitting = false;

            addMarkForm.addEventListener('submit', (e) => {
                e.preventDefault();

                if (isSubmitting) return;
                isSubmitting = true;

                const x = parseFloat(document.getElementById('mark_x').value);
                const y = parseFloat(document.getElementById('mark_y').value);
                const color = document.getElementById('mark_color').value;
                const label = document.getElementById('mark_label').value;
                const isWeakElectric = document.getElementById('addAsWeakElectric').checked;

                const markType = isWeakElectric ? 'WeakElectric' : 'AP';

                let weakElectricId = null;
                if (!isWeakElectric) {
                    const selectedMapFloor = document.getElementById('add_select_map_floor').value;
                    if (selectedMapFloor) {
                        weakElectricId = parseInt(document.getElementById('add_select_weak_electric').value) || null;
                    }
                }

                fetch(`/add_mark/{{ map.id }}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ x, y, color, label, type: markType, weak_electric_id: weakElectricId })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Add Mark Response:', data);
                    if (data.status === 'success' && data.mark && data.mark.id) {
                        const newMark = createMarkElement(data.mark);
                        panzoomElement.appendChild(newMark);
                        bindMarkEvents(newMark);
                        
                        if (apBindingLabelsVisible) {
                            updateBindingLabelForMark(newMark);
                        }

                        if (!isWeakElectric) {
                            updateMarkCount(color.toLowerCase(), 1);
                        }
						
						// 记录“添加”动作
						pushAction({
						    type: 'add',
							mark: data.mark
						});

                        // 对于WeakElectric标记，直接重新渲染汇总
                        if (markType === 'WeakElectric') {
                            renderMarkSummary();
                            loadWeakElectricData(() => {
                                if (apBindingLabelsVisible) {
                                    removeApBindingLabels();
                                    loadApBindingLabels();
                                }
                            });
                        }
                        lastSelectedColor = color;
                        lastEnteredLabel = label;

                        $('#addMarkModal').modal('hide');
                        console.log(`Mark ${data.mark.id} added successfully.`);
                    } else {
                        alert('添加标记失败: ' + (data.message || '未知错误'));
                        console.error('Add mark failed:', data);
                    }
                })
                .catch(err => {
                    console.error('Fetch Error:', err);
                    alert('添加标记失败: ' + err);
                })
                .finally(() => {
                    isSubmitting = false;
                });
            });
        };

        /**
         * 编辑标记表单提交处理
         */
        const handleEditMarkForm = () => {
            const editMarkForm = document.getElementById('editMarkForm');

            editMarkForm.addEventListener('submit', (e) => {
                e.preventDefault();

                const markId = document.getElementById('edit_mark_id').value;
                const label = document.getElementById('edit_mark_label').value;
                const color = document.getElementById('edit_mark_color').value;
                const markElement = document.getElementById(`mark-${markId}`);
                const markType = markElement.getAttribute('data-type');

                let originalColor;
                if (markElement.classList.contains('weak-electric-mark')) {
                    originalColor = markElement.style.borderColor.toLowerCase();
                } else {
                    originalColor = markElement.style.backgroundColor.toLowerCase();
                }

                let weakElectricId = null;
                if (markType !== 'WeakElectric') {
                    const selectedMapFloor = document.getElementById('edit_select_map_floor').value;
                    if (selectedMapFloor) {
                        weakElectricId = parseInt(document.getElementById('edit_select_weak_electric').value) || null;
                    }
                }
				
				// 获取当前标签
				const labelDiv = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
				const currentLabel = labelDiv ? labelDiv.textContent : '';
				// 记录编辑前的状态
				const previousState = {
				    label: currentLabel,
					color: originalColor,
					weak_electric_id: markElement.getAttribute('data-weak-electric-id') || null
				};

                fetch(`/edit_mark/${markId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ label, color, weak_electric_id: weakElectricId })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Edit Mark Response:', data);
                    if (data.status === 'success') {
                        if (markElement.classList.contains('weak-electric-mark')) {
                            markElement.style.borderColor = color;
                            markElement.style.color = color;
                        } else {
                            markElement.style.backgroundColor = color;
                        }

                        markElement.setAttribute('data-weak-electric-id', weakElectricId || '');

                        const currentSize = getCurrentSize();
                        const settings = sizeSettings[currentSize];

                        const labelDiv = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
                        if (labelDiv) {
                            labelDiv.textContent = label;
                            labelDiv.style.fontSize = settings.labelFontSize;
                        } else if (label) {
                            const newLabelDiv = document.createElement('div');
                            newLabelDiv.classList.add('label');
                            newLabelDiv.style.top = `calc(${markElement.style.top} + 1px)`;
                            newLabelDiv.style.left = markElement.style.left;
                            newLabelDiv.style.fontSize = settings.labelFontSize;
                            newLabelDiv.textContent = label;
                            newLabelDiv.setAttribute('data-mark-id', markId); // 添加关联属性
                            panzoomElement.appendChild(newLabelDiv);
                        }

                        if (!markElement.classList.contains('weak-electric-mark')) {
                            if (originalColor && originalColor !== color.toLowerCase()) {
                                updateMarkCountWithoutRenderMarkSummary(originalColor, -1);
                                updateMarkCountWithoutRenderMarkSummary(color.toLowerCase(), 1);
                            }
                        }
                        // **renderMarkSummary 调用 执行表单刷新**
                        renderMarkSummary();
						
						// 记录“编辑”动作
						pushAction({
						    type: 'edit',
							markId: markId,
							previousState: previousState
						});

                        $('#editMarkModal').modal('hide');
                        console.log(`Mark ${markId} edited successfully.`);
                        if (markElement.classList.contains('weak-electric-mark')) {
                            loadWeakElectricData(() => {
                                if (apBindingLabelsVisible) {
                                    removeApBindingLabels();
                                    loadApBindingLabels();
                                }
                            });
                        }
                        if (apBindingLabelsVisible) {
                            updateBindingLabelForMark(markElement);
                        }

                    } else {
                        alert('编辑标记失败: ' + (data.message || '未知错误'));
                        console.error('Edit mark failed:', data);
                    }
                })
                .catch(err => {
                    console.error('Fetch Error:', err);
                    alert('编辑标记失败: ' + err);
                });
            });
        };

        /**
         * 删除标记按钮处理
         */
        const handleDeleteMarkButton = () => {
            document.getElementById('deleteMarkButton').addEventListener('click', () => {
                const markId = document.getElementById('edit_mark_id').value;
                const markElement = document.getElementById(`mark-${markId}`);
                const markType = markElement.getAttribute('data-type');
                
                if (markType === 'WeakElectric') {
                    // 通过 API 检查弱电井标记是否有绑定
                    fetch(`/api/check_weak_electric_bindings/${markId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            const hasBindings = data.has_bindings;
                            if (hasBindings) {
                                $('#deleteConfirmModal').modal('show');
                            } else {
                                if (confirm('确认删除此标记吗？')) {
                                    deleteMark(markId, false);
                                }
                            }
                        } else {
                            console.error('Failed to check weak electric bindings:', data.message);
                            alert('无法检查弱电井的绑定状态。');
                        }
                    })
                    .catch(err => {
                        console.error('Fetch Error:', err);
                        alert('无法检查弱电井的绑定状态。');
                    });
                } else {
                    if (confirm('确认删除此标记吗？')) {
                        deleteMark(markId, false);
                    }
                }
            });
        };

/**
 * 删除标记并处理绑定关系
 * @param {number} markId - 标记ID
 * @param {boolean} force - 是否强制删除（解除绑定）
 */
const deleteMark = (markId, force) => {
    fetch(`/api/delete_mark/${markId}?force=${force}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Delete Mark Response:', data);
        if (data.status === 'success') {
            const markElement = document.getElementById(`mark-${markId}`);
            if (markElement) {
                const labelElement = document.querySelector(`.label:not(.binding-label)[data-mark-id="${markId}"]`);
                let color;
                let markType;
                if (markElement.classList.contains('weak-electric-mark')) {
                    color = markElement.style.borderColor.toLowerCase();
                    markType = 'WeakElectric';
                } else {
                    color = markElement.style.backgroundColor.toLowerCase();
                    markType = 'AP';
                }

                // 记录被删除的标记信息
                const deletedMark = {
                    id: markId,
                    x: parseFloat(markElement.style.left),
                    y: parseFloat(markElement.style.top),
                    color: markType === 'WeakElectric' ? markElement.style.borderColor : markElement.style.backgroundColor,
                    type: markType,
                    label: labelElement ? labelElement.textContent : '',
                    weak_electric_id: markElement.getAttribute('data-weak-electric-id') || null
                };

                // 记录“删除”动作
                pushAction({
                    type: 'delete',
                    mark: deletedMark
                });

                markElement.remove();
                if (labelElement) {
                    labelElement.remove();
                }
                const bindingLabel = document.querySelector(`.binding-label[data-mark-id="${markId}"]`);
                if (bindingLabel) {
                    bindingLabel.remove();
                }

                if (!markElement.classList.contains('weak-electric-mark')) {
                    if (color) {
                        updateMarkCount(color, -1);
                    }
                }

                if (markElement.classList.contains('weak-electric-mark')) {
                    const index = weakElectricUsedColors.indexOf(color);
                    if (index > -1) {
                        weakElectricUsedColors.splice(index, 1);
                    }
                    // 对于WeakElectric标记，直接重新渲染汇总
                    renderMarkSummary();
                    loadWeakElectricData(() => {
                        if (apBindingLabelsVisible) {
                            removeApBindingLabels();
                            loadApBindingLabels();
                        }
                    });
                }

                $('#editMarkModal').modal('hide');
                console.log(`Mark ${markId} deleted successfully.`);
            }
        } else {
            alert('删除标记失败: ' + (data.message || '未知错误'));
            console.error('Delete mark failed:', data);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
        alert('删除标记失败: ' + err);
    });
};

        /**
         * 初始化颜色绑定相关事件
         */
        const bindBindingEvents = () => {
            // 可以在这里添加更多绑定相关的事件处理
        };

        /**
         * 显示WeakElectric的AP绑定信息
         * @param {number} weakElectricId - 弱电井标记ID
         */
        const showApBindings = (weakElectricId) => {
            fetch(`/api/get_ap_bindings/${weakElectricId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const bindings = data.bindings;

                    // 获取WeakElectric标记的颜色和定义
                    const markElement = document.getElementById(`mark-${weakElectricId}`);
                    const markColor = markElement.style.borderColor.toLowerCase();
                    const markDefinition = weak_electric_definitions[markColor];
                    
                    // 构建标题
                    let content = `<h5>${mapName}/${mapFloor} - ${markDefinition} (${colorLabelMap[markColor]}) 的AP绑定情况</h5>`;
                    if (bindings.length === 0) {
                        content += '<p>暂无AP绑定。</p>';
                    } else {
                        const summary = bindings.reduce((acc, ap) => {
                            acc.total += 1;
                            acc.models[ap.definition] = (acc.models[ap.definition] || 0) + 1;
                            return acc;
                        }, { total: 0, models: {} });

                        content += `<p>总数: ${summary.total}</p>`;
                        content += '<h6>型号汇总：</h6><ul>';
                        for (const [definition, count] of Object.entries(summary.models)) {
                            content += `<li>${definition}: ${count}</li>`;
                        }
                        content += '</ul>';
                    }

                    $('#apBindingsModal .modal-body').html(content);
                    $('#apBindingsModal').modal('show');
                } else {
                    alert('获取AP绑定信息失败: ' + (data.message || '未知错误'));
                }
            })
            .catch(err => {
                console.error('Fetch Error:', err);
                alert('获取AP绑定信息失败: ' + err);
            });
        };

/**
 * 左键点击空白区域添加标记
 */
const bindMapClick = () => {
    panzoomElement.addEventListener('click', (e) => {
        if (e.target === panzoomElement || e.target.id === 'map-image') {
            const rect = panzoomElement.getBoundingClientRect();
            const x = ((e.clientX - rect.left) / rect.width) * 100;
            const y = ((e.clientY - rect.top) / rect.height) * 100;

            if (isMobileDevice()) {
                // 移动端逻辑
                if (quickAddConfig) {
                    // 已配置快捷添加，直接执行快捷添加
                    addAPQuickly(x, y);
                } else {
                    // 未配置快捷添加，打开添加标记模态框
                    openAddMarkModal(x, y);
                }
            } else {
                // 桌面端逻辑保持不变
                if (e.shiftKey) {
                    // Shift + 左键点击，进行快捷添加
                    if (quickAddConfig) {
                        addAPQuickly(x, y);
                    } else {
                        alert('请先配置快捷添加。');
                    }
                } else {
                    openAddMarkModal(x, y);
                }
            }
        }
    });
};

/**
 * 打开添加标记模态框并保存 Panzoom 状态
 * @param {number} x - X 坐标（百分比）
 * @param {number} y - Y 坐标（百分比）
 */
function openAddMarkModal(x, y) {
    if (panzoomInstance) {
        localStorage.setItem('panzoomScale', panzoomInstance.getScale());
        localStorage.setItem('panzoomX', panzoomInstance.getPan().x);
        localStorage.setItem('panzoomY', panzoomInstance.getPan().y);
        console.log('Panzoom state saved:', {
            scale: panzoomInstance.getScale(),
            x: panzoomInstance.getPan().x,
            y: panzoomInstance.getPan().y
        });
    }

    $('#addMarkModal').modal('show');
    document.getElementById('mark_x').value = x.toFixed(2);
    document.getElementById('mark_y').value = y.toFixed(2);
    if (lastSelectedColor) {
        document.getElementById('mark_color').value = lastSelectedColor;
    }
    document.getElementById('mark_label').value = lastEnteredLabel;
}

/**
 * 检测是否为移动设备
 * @returns {boolean} - 如果是移动设备则返回 true
 */
function isMobileDevice() {
    return /Mobi|Android|iPhone|iPad|iPod|Windows Phone|Opera Mini/i.test(navigator.userAgent);
}

        
/**
 * 快速添加 AP 标记
 * @param {number} x - X 坐标（百分比）
 * @param {number} y - Y 坐标（百分比）
 */
const addAPQuickly = (x, y) => {
    const color = quickAddConfig.color;
    let label = quickAddConfig.label;
    const selectedMapFloor = quickAddConfig.select_map_floor;
    let weakElectricId = null;
    const autoLabel = quickAddConfig.autoLabel;
    
    if (selectedMapFloor) {
        weakElectricId = parseInt(quickAddConfig.select_weak_electric) || null;
    }

    if (autoLabel) {
        // 获取当前图纸上的 AP 数量
        const currentAPs = document.querySelectorAll('.mark:not(.weak-electric-mark)').length;
        const newLabelNumber = currentAPs + 1;
        // 不足两位数前面补0
        const paddedNumber = newLabelNumber.toString().padStart(2, '0');
        label = 'AP' + paddedNumber;
    }

    fetch(`/add_mark/{{ map.id }}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ x, y, color, label, type: 'AP', weak_electric_id: weakElectricId })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Add AP Response:', data);
        if (data.status === 'success' && data.mark && data.mark.id) {
            const newMark = createMarkElement(data.mark);
            panzoomElement.appendChild(newMark);
            bindMarkEvents(newMark);
                // 如果绑定标签可见，更新绑定标签
            if (apBindingLabelsVisible) {
                updateBindingLabelForMark(newMark);
            }

            updateMarkCount(color.toLowerCase(), 1);

            // 记录“添加”动作
            pushAction({
                type: 'add',
                mark: data.mark
            });

            console.log(`AP Mark ${data.mark.id} added quickly.`);
        } else {
            alert('快捷添加AP失败: ' + (data.message || '未知错误'));
            console.error('Quick add AP failed:', data);
        }
    })
    .catch(err => {
        console.error('Fetch Error:', err);
        alert('快捷添加AP失败: ' + err);
    });
};

        /**
         * 加载可绑定的WeakElectric标记选项
         * @param {string} [mode] - 模式，'add' 或 'edit' 或 'quickAdd'
         * @param {number} [selectedWeakElectricId] - 预选的WeakElectric标记ID（仅在edit和quickAdd模式下使用）
         */
        const loadWeakElectricOptions = (mode = 'add', selectedWeakElectricId = null) => {
            let selectMapFloorElement, selectWeakElectricElement;

            switch(mode) {
                case 'add':
                    selectMapFloorElement = document.getElementById('add_select_map_floor');
                    selectWeakElectricElement = document.getElementById('add_select_weak_electric');
                    break;
                case 'edit':
                    selectMapFloorElement = document.getElementById('edit_select_map_floor');
                    selectWeakElectricElement = document.getElementById('edit_select_weak_electric');
                    break;
                case 'quickAdd':
                    selectMapFloorElement = document.getElementById('quickAdd_select_map_floor');
                    selectWeakElectricElement = document.getElementById('quickAdd_select_weak_electric');
                    break;
                default:
                    console.error('Unknown mode for loading WeakElectric options.');
                    return;
            }

            populateMapFloorSelect(selectMapFloorElement);
            // 如果有预选项，则触发变化事件以加载弱电井
            if (selectedWeakElectricId) {
                const selectedWeMark = Object.values(weakElectricMarksData).find(weMark => weMark.id === selectedWeakElectricId);
                if (selectedWeMark) {
                    const mapFloorKey = `${selectedWeMark.map_floor}`;
                    selectMapFloorElement.value = mapFloorKey;
                    populateWeakElectricSelect(selectWeakElectricElement, mapFloorKey);
                    selectWeakElectricElement.value = selectedWeakElectricId;
                }
            } else {
                // **关键调整：默认选择当前图纸/楼层**
                const currentMapFloorKey = `${mapFloor}`;
                selectMapFloorElement.value = currentMapFloorKey;
                populateWeakElectricSelect(selectWeakElectricElement, currentMapFloorKey);
                selectWeakElectricElement.value = ''; // 选择“不绑定”
            }
        };

        /**
         * 确认删除并解除绑定关系
         */
        const confirmDeleteAndUnbind = (markId) => {
            deleteMark(markId, true);
            $('#deleteConfirmModal').modal('hide');
        };

        /**
         * 初始化删除确认模态框事件
         */
        const initializeDeleteConfirmModal = () => {
            document.getElementById('confirmDeleteAndUnbindButton').addEventListener('click', () => {
                const markId = document.getElementById('edit_mark_id').value;
                confirmDeleteAndUnbind(markId);
            });

            document.getElementById('cancelDeleteButton').addEventListener('click', () => {
                $('#deleteConfirmModal').modal('hide');
            });
        };

        /**
         * 初始化所有事件绑定
         */
        const initializeEventBindings = () => {
            bindDropdownEvents();
            handleAddMarkForm();
            handleEditMarkForm();
            handleDeleteMarkButton();
            bindButtonEvents();
            initializeDeleteConfirmModal();
            document.getElementById('toggleApBindingButton').addEventListener('click', () => {
                apBindingLabelsVisible = !apBindingLabelsVisible;
                if (apBindingLabelsVisible) {
                    document.getElementById('toggleApBindingButton').textContent = '隐藏AP绑定';
                    loadApBindingLabels();
                } else {
                    document.getElementById('toggleApBindingButton').textContent = '加载AP绑定';
                    removeApBindingLabels();
                }
            });
			// 绑定“撤销”按钮事件
			document.getElementById('undoButton').addEventListener('click', () => {
			     undoLastAction();
			});
        };

        /**
         * 初始化 Panzoom 和绑定标记事件
         */
        const initializeMap = () => {
            initializePanzoom();
            restorePanzoomState();
            bindAllMarks();

            // 当 Panzoom 初始化完成后，隐藏加载动画
            if (mapLoadingOverlay) {
                mapLoadingOverlay.style.display = 'none';
                console.log('加载动画已隐藏，Panzoom 初始化完成。');
            }
        };

        /**
         * 初始化颜色绑定相关事件
         */
        bindBindingEvents();

        // 初始化标记汇总表单
        renderMarkSummary();

        // 初始化所有事件绑定
        initializeEventBindings();
        initializeColorDropdowns();

        /**
         * 设置图纸初始化
         */
        const setupMapInitialization = () => {
            const naturalWidth = mapImage.naturalWidth;
            const naturalHeight = mapImage.naturalHeight;
            const containerWidth = mapContainer.clientWidth;
            const aspectRatio = (naturalHeight / naturalWidth) * 100;
            const containerHeight = containerWidth * (naturalHeight / naturalWidth);

            mapContainer.style.height = `${containerHeight}px`;
            console.log(`Map container height set to ${containerHeight}px based on image aspect ratio.`);

            initializeMap();
            initializeSizeSetting();
        };

        /**
         * 绑定图像加载事件
         */
        const handleMapImageLoad = () => {
            // 当图像加载完成后，初始化图纸并隐藏加载动画
            setupMapInitialization();
        };

        // 绑定图像加载事件
        mapImage.addEventListener('load', handleMapImageLoad);

        // 如果图像已加载（从缓存中）
        if (mapImage.complete) {
            handleMapImageLoad();
        }

        /**
         * 确保加载动画在图像加载失败时隐藏并提示用户
         */
        mapImage.addEventListener('error', () => {
            console.error('地图图像加载失败。');
            alert('地图图像加载失败，请检查网络连接或联系管理员。');
            if (mapLoadingOverlay) {
                mapLoadingOverlay.style.display = 'none';
            }
        });

        // 绑定左键点击空白区域添加标记事件
        bindMapClick();
    });
    </script>

    <!-- 添加标记模态框 -->
    <div class="modal fade" id="addMarkModal" tabindex="-1" aria-labelledby="addMarkModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="addMarkForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addMarkModalLabel">添加标记</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="关闭">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- CSRF 令牌已通过 meta 标签传递，不需要在表单中包含 -->
                        <div class="form-group">
                            <label for="mark_x">X 坐标（0-100）</label>
                            <input type="number" step="0.01" class="form-control" id="mark_x" name="x" readonly>
                        </div>
                        <div class="form-group">
                            <label for="mark_y">Y 坐标（0-100）</label>
                            <input type="number" step="0.01" class="form-control" id="mark_y" name="y" readonly>
                        </div>
                        <!-- 添加为弱电井复选框 -->
                        <div class="form-group form-check">
                            <input type="checkbox" class="form-check-input" id="addAsWeakElectric" name="add_as_weak_electric">
                            <label class="form-check-label" for="addAsWeakElectric">添加为弱电井</label>
                        </div>
                        <div class="form-group">
                            <label for="mark_color">颜色</label>
                            <select class="form-control form-control-sm" id="mark_color" name="color">
                                <!-- 动态生成的选项将插入这里 -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="mark_label">标签</label>
                            <input type="text" class="form-control" id="mark_label" name="label" maxlength="100">
                        </div>
                        <!-- 绑定WeakElectric标记 -->
                        <div class="row" id="add_bindToWeakElectricContainer">
                            <div class="form-group col-md-6">
                                <label for="add_select_map_floor">汇聚楼层</label>
                                <select class="form-control form-control-sm" id="add_select_map_floor" name="select_map_floor">
                                    <!-- 动态生成的图纸/楼层选项将插入这里 -->
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="add_select_weak_electric">汇聚弱电井</label>
                                <select class="form-control form-control-sm" id="add_select_weak_electric" name="select_weak_electric" disabled>
                                    <option value="">不绑定</option>
                                    <!-- 动态生成的弱电井选项将插入这里 -->
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">取消</button>
                        <button type="submit" class="btn btn-primary">添加标记</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- 编辑标记模态框 -->
    <div class="modal fade" id="editMarkModal" tabindex="-1" aria-labelledby="editMarkModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="editMarkForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editMarkModalLabel">编辑标记</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="关闭">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="edit_mark_id" name="mark_id">
                        <div class="form-group">
                            <label for="edit_mark_label">标签</label>
                            <input type="text" class="form-control" id="edit_mark_label" name="label" maxlength="100">
                        </div>
                        <div class="form-group">
                            <label for="edit_mark_color">颜色</label>
                            <select class="form-control form-control-sm" id="edit_mark_color" name="color">
                                <!-- 动态生成的选项将插入这里 -->
                            </select>
                        </div>
                        <!-- 绑定WeakElectric标记：分为选择图纸名/楼层和选择弱电井 -->
                        <div class="row" id="edit_bindToWeakElectricContainer">
                            <div class="form-group col-md-6">
                                <label for="edit_select_map_floor">汇聚楼层</label>
                                <select class="form-control form-control-sm" id="edit_select_map_floor" name="select_map_floor">
                                    <!-- 动态生成的图纸/楼层选项将插入这里 -->
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="edit_select_weak_electric">汇聚弱电井</label>
                                <select class="form-control form-control-sm" id="edit_select_weak_electric" name="select_weak_electric" disabled>
                                    <option value="">不绑定</option>
                                    <!-- 动态生成的弱电井选项将插入这里 -->
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- 修改后的 modal-footer -->
                    <div class="modal-footer d-flex justify-content-between">
                        <!-- 左侧按钮组 -->
                        <div>
                            <button type="button" class="btn btn-info mr-2" id="showApBindingsButton" style="display: none;">显示AP绑定</button>
                        </div>
                        <!-- 右侧按钮组 -->
                        <div>
                            <button type="button" class="btn btn-danger" id="deleteMarkButton">删除标记</button>
                            <button type="button" class="btn btn-secondary mr-2" data-dismiss="modal">取消</button>
                            <button type="submit" class="btn btn-primary">保存更改</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- AP绑定信息模态框 -->
    <div class="modal fade" id="apBindingsModal" tabindex="-1" aria-labelledby="apBindingsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">AP绑定信息</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="关闭">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- 动态生成的内容将插入这里 -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 删除确认模态框 -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">确认删除</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="关闭">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>该弱电井存在AP绑定。您确定要删除此标记并解除所有绑定关系吗？</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="confirmDeleteAndUnbindButton">确认</button>
                    <button type="button" class="btn btn-secondary" id="cancelDeleteButton">取消</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- 配置快捷添加模态框 -->
    <div class="modal fade" id="quickAddConfigModal" tabindex="-1" aria-labelledby="quickAddConfigModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="quickAddConfigForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="quickAddConfigModalLabel">配置快捷添加</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="关闭">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- 仅包含颜色、标签和绑定弱电井 -->
                        <div class="form-group">
                            <label for="quickAdd_mark_color">颜色</label>
                            <select class="form-control form-control-sm" id="quickAdd_mark_color" name="color">
                                <!-- 动态生成的选项将插入这里 -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="quickAdd_mark_label">标签</label>
                            <input type="text" class="form-control" id="quickAdd_mark_label" name="label" maxlength="100">
                        </div>
                        <!-- 新增的“快速标签”复选框 -->
                        <div class="form-group form-check">
                            <input type="checkbox" class="form-check-input" id="quickAdd_auto_label" name="auto_label">
                            <label class="form-check-label" for="quickAdd_auto_label">快速标签</label>
                        </div>
                        <!-- 绑定WeakElectric标记：分为选择图纸名/楼层和选择弱电井 -->
                        <div class="row" id="quickAdd_bindToWeakElectricContainer">
                            <div class="form-group col-md-6">
                                <label for="quickAdd_select_map_floor">汇聚楼层</label>
                                <select class="form-control form-control-sm" id="quickAdd_select_map_floor" name="select_map_floor">
                                    <!-- 动态生成的图纸/楼层选项将插入这里 -->
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="quickAdd_select_weak_electric">汇聚弱电井</label>
                                <select class="form-control form-control-sm" id="quickAdd_select_weak_electric" name="select_weak_electric" disabled>
                                    <option value="">不绑定</option>
                                    <!-- 动态生成的弱电井选项将插入这里 -->
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <!-- 添加“清除配置”按钮 -->
                        <button type="button" class="btn btn-secondary" id="clearQuickAddConfigButton">清除配置</button>
                        <button type="submit" class="btn btn-primary">保存配置</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

